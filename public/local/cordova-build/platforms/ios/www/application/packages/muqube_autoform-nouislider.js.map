{"version":3,"sources":["meteor://ðŸ’»app/packages/muqube_autoform-nouislider/template.autoform-nouislider.js","meteor://ðŸ’»app/packages/muqube_autoform-nouislider/autoform-nouislider.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8F;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+F","file":"/packages/muqube_autoform-nouislider.js","sourcesContent":["\nTemplate.__checkName(\"afNoUiSlider\");\nTemplate[\"afNoUiSlider\"] = new Template(\"Template.afNoUiSlider\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"atts\"));\n  }), \"\\n    \", Blaze.If(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\"atts\"), \"doLabels\"));\n  }, function() {\n    return [ \"\\n      \", HTML.DIV({\n      \"class\": \"nouislider-container\"\n    }, \"\\n        \", HTML.SPAN({\n      \"class\": \"nouislider-label\"\n    }, Blaze.View(\"lookup:atts.labelLeft\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"atts\"), \"labelLeft\"));\n    })), \"\\n        \", HTML.DIV({\n      \"class\": \"nouislider\"\n    }), \"\\n        \", HTML.SPAN({\n      \"class\": \"nouislider-label\"\n    }, Blaze.View(\"lookup:atts.labelRight\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"atts\"), \"labelRight\"));\n    })), \"\\n      \"), \"\\n    \" ];\n  }, function() {\n    return [ \"\\n      \", HTML.DIV({\n      \"class\": \"nouislider\"\n    }), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","/* global AutoForm, _, Template */\n\nAutoForm.addInputType(\"noUiSlider\", {\n  template: \"afNoUiSlider\",\n  valueOut: function(){\n    var slider = this.find('.nouislider');\n    var isDecimal = this.closest(\".at-nouislider\").data(\"decimal\");\n\n    if( this.attr(\"data-type\") === \"Object\" ){\n      var parser = (isDecimal)? parseFloat : parseInt;\n      var first = parser.call(null, slider.val()[0]);\n      var second = parser.call(null, slider.val()[1]);\n      var value = {\n        lower: first > second ? second : first,\n        upper: first > second ? first : second\n      };\n      return value;\n    }else{\n      return slider.val();\n    }\n  }\n});\n\nTemplate.afNoUiSlider.helpers({\n  atts: function () {\n    var data = Template.currentData(); // get data reactively\n    var atts = data.atts;\n    atts[\"data-type\"] = data.schemaType.name;\n    if( atts[\"class\"] ){\n      atts[\"class\"] += \" at-nouislider\";\n    }else{\n      atts[\"class\"] = \"at-nouislider\";\n    }\n\n    atts.doLabels = ( atts.labelLeft || atts.labelRight );\n\n    atts[\"data-decimal\"] = data.decimal;\n\n    return _.omit(atts, 'noUiSliderOptions', 'noUiSlider_pipsOptions');\n  }\n});\n\nvar calculateOptions = function(data){\n  var schemaMinMax = _.pick(data, 'max', 'min');\n  var autoformOptions = _.pick(data.atts || {}, 'max', 'min', 'step', 'start', 'range');\n  var noUiSliderOptions = (data.atts || {}).noUiSliderOptions;\n\n  var options = _.extend({}, schemaMinMax, autoformOptions, noUiSliderOptions);\n\n  // Adjust data initialization based on schema type\n  if( options.start === undefined ){\n    if( data.schemaType.name === \"Object\" ){\n      if( data.value && data.value.lower ){\n        options.start = [\n          data.value.lower,\n          data.value.upper\n        ];\n      }else{\n        options.start = [\n          typeof data.min === \"number\" ? data.min : 0,\n          typeof data.max === \"number\" ? data.max : 100\n        ];\n      }\n      options.connect = true;\n    }else{\n      options.start = data.value || 0;\n    }\n  } else {\n    options.start = JSON.parse(options.start);\n  }\n\n  if( options.range === undefined ){\n    options.range = {\n      min: typeof options.min === \"number\" ? options.min : 0,\n      max: typeof options.max === \"number\" ? options.max : 100\n    };\n  } else {\n    options.range = JSON.parse(options.range);\n  }\n  delete options.min;\n  delete options.max;\n\n  // default step to 1 if not otherwise defined\n  if( options.step === undefined ){\n    options.step = 1;\n  }\n\n  return options;\n};\n\nTemplate.afNoUiSlider.rendered = function () {\n  var template = this;\n  var $s = template.$('.nouislider');\n\n  var setup = function(c){\n    var data = Template.currentData(); // get data reactively\n    var options = calculateOptions( data );\n    $s.noUiSlider(options, true);\n\n    if (c.firstRun) {\n      $s.on('slide', function(){\n        // This is a trick to fool some logic in AutoForm that makes\n        // sure values have actually changed on whichever element\n        // emits a change event. Eventually AutoForm will give\n        // input types the control of indicating exactly when\n        // their value changes rather than relying on the change event\n        $s.parent()[0].value = JSON.stringify($s.val());\n        $s.parent().change();\n        $s.data('changed','true');\n      });\n    }\n    \n    if( data.atts.noUiSlider_pipsOptions ){\n      $s.noUiSlider_pips(\n        data.atts.noUiSlider_pipsOptions\n      );\n    }\n  };\n  \n  template.autorun( setup );\n};\n"]}