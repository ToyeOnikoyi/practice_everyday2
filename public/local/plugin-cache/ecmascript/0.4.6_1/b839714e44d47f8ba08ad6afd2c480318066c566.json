{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/raix:push/lib/client/cordova.js","filenameRelative":"/packages/raix:push/lib/client/cordova.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/raix:push/lib/client/cordova.js.map","sourceFileName":"/packages/raix:push/lib/client/cordova.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"cordova"},"ignored":false,"code":"var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/* global device: false */\n/* global PushNotification: false */\nvar getService = function getService() {\n  if (/android/i.test(device.platform)) {\n    return 'gcm';\n  } else if (/ios/i.test(device.platform)) {\n    return 'apn';\n  } else if (/win/i.test(device.platform)) {\n    return 'mpns';\n  }\n\n  return 'unknown';\n};\n\n/**\n * https://github.com/phonegap/phonegap-plugin-push#pushnotificationinitoptions\n */\n\nvar PushHandle = function (_EventState) {\n  (0, _inherits3['default'])(PushHandle, _EventState);\n\n  function PushHandle() {\n    (0, _classCallCheck3['default'])(this, PushHandle);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, _EventState.call(this));\n\n    _this.configured = false;\n    _this.debug = false;\n    _this.token = null;\n    return _this;\n  }\n\n  PushHandle.prototype.log = function log() {\n    if (this.debug) {\n      var _console;\n\n      (_console = console).log.apply(_console, arguments);\n    }\n  };\n\n  PushHandle.prototype.setBadge = function setBadge(count) {\n    var _this2 = this;\n\n    this.once('ready', function () {\n      if (/ios/i.test(device.platform)) {\n        _this2.log('Push.setBadge:', count);\n        // xxx: at the moment only supported on iOS\n        _this2.push.setApplicationIconBadgeNumber(function () {\n          _this2.log('Push.setBadge: was set to', count);\n        }, function (e) {\n          _this2.emit('error', {\n            type: getService() + '.cordova',\n            error: 'Push.setBadge Error: ' + e.message\n          });\n        }, count);\n      }\n    });\n  };\n\n  PushHandle.prototype.unregister = function unregister(successHandler, errorHandler) {\n    if (this.push) {\n      this.push.unregister(successHandler, errorHandler);\n    } else {\n      errorHandler(new Error('Push.unregister, Error: \"Push not configured\"'));\n    }\n  };\n\n  PushHandle.prototype.Configure = function Configure() {\n    var _this3 = this,\n        _arguments = arguments;\n\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\n    if (!this.configured) {\n      this.log('Push.Configure:', options);\n\n      this.configured = true;\n\n      Meteor.startup(function () {\n\n        if (typeof PushNotification !== 'undefined') {\n\n          _this3.push = PushNotification.init(options);\n\n          _this3.push.on('registration', function (data) {\n\n            // xxx: we need to check that the token has changed before emitting\n            // a new token state - sometimes this event is triggered twice\n            if (data && data.registrationId && _this3.token !== data.registrationId) {\n              var _token;\n\n              _this3.token = data.registrationId;\n\n              var token = (_token = {}, _token[getService()] = data.registrationId, _token);\n              _this3.log('Push.Token:', token);\n              _this3.emitState('token', token);\n            }\n\n            _this3.emitState.apply(_this3, ['registration'].concat(Array.prototype.slice.call(_arguments)));\n          });\n\n          _this3.push.on('notification', function (data) {\n            _this3.log('Push.Notification:', data);\n            // xxx: check ejson support on \"additionalData\" json object\n\n            if (data.additionalData.ejson) {\n              if (data.additionalData.ejson === '' + data.additionalData.ejson) {\n                try {\n                  data.payload = EJSON.parse(data.additionalData.ejson);\n                  _this3.log('Push.Parsed.EJSON.Payload:', data.payload);\n                } catch (err) {\n                  _this3.log('Push.Parsed.EJSON.Payload.Error', err.message, data.payload);\n                }\n              } else {\n                data.payload = EJSON.fromJSONValue(data.additionalData.ejson);\n                _this3.log('Push.EJSON.Payload:', data.payload);\n              }\n            }\n\n            // Emit alert event - this requires the app to be in forground\n            if (data.message && data.additionalData.foreground) {\n              _this3.emit('alert', data);\n            }\n\n            // Emit sound event\n            if (data.sound) {\n              _this3.emit('sound', data);\n            }\n\n            // Emit badge event\n            if (typeof data.count !== 'undefined') {\n              _this3.log('Push.SettingBadge:', data.count);\n              _this3.setBadge(data.count);\n              _this3.emit('badge', data);\n            }\n\n            if (data.additionalData.foreground) {\n              _this3.log('Push.Message: Got message while app is open:', data);\n              _this3.emit('message', data);\n            } else {\n              _this3.log('Push.Startup: Got message while app was closed/in background:', data);\n              _this3.emitState('startup', data);\n            }\n\n            _this3.emitState();\n          });\n\n          _this3.push.on('error', function (e) {\n            _this3.log('Push.Error:', e);\n            _this3.emit('error', {\n              type: getService() + '.cordova',\n              error: e.message\n            });\n          });\n\n          _this3.emitState('ready');\n        }\n      });\n\n      initPushUpdates(options.appName);\n    } else {\n      this.log('Push.Error: \"Push.Configure may only be called once\"');\n      throw new Error('Push.Configure may only be called once');\n    }\n  };\n\n  return PushHandle;\n}(EventState);\n\nPush = new PushHandle();","ast":null,"map":{"version":3,"sources":["/packages/raix:push/lib/client/cordova.js"],"names":[],"mappings":"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","file":"/packages/raix:push/lib/client/cordova.js.map","sourcesContent":["/* global device: false */\n/* global PushNotification: false */\nvar getService = function() {\n  if (/android/i.test(device.platform)) {\n    return 'gcm';\n  } else if (/ios/i.test(device.platform)) {\n    return 'apn';\n  } else if (/win/i.test(device.platform)) {\n    return 'mpns';\n  }\n\n  return 'unknown';\n};\n\n/**\n * https://github.com/phonegap/phonegap-plugin-push#pushnotificationinitoptions\n */\nclass PushHandle extends EventState {\n  constructor() {\n    super();\n    this.configured = false;\n    this.debug = false;\n    this.token = null;\n  }\n  log() {\n    if (this.debug) {\n      console.log(...arguments);\n    }\n  }\n  setBadge(count) {\n    this.once('ready', () => {\n      if (/ios/i.test(device.platform)) {\n        this.log('Push.setBadge:', count);\n        // xxx: at the moment only supported on iOS\n        this.push.setApplicationIconBadgeNumber(() => {\n          this.log('Push.setBadge: was set to', count);\n        }, (e) => {\n          this.emit('error', {\n            type: getService() + '.cordova',\n            error: 'Push.setBadge Error: ' + e.message\n          });\n        }, count);\n\n      }\n    });\n  }\n  unregister(successHandler, errorHandler) {\n    if (this.push) {\n      this.push.unregister(successHandler, errorHandler);\n    } else {\n      errorHandler(new Error('Push.unregister, Error: \"Push not configured\"'));\n    }\n  }\n  Configure(options = {}) {\n\n    if (!this.configured) {\n      this.log('Push.Configure:', options);\n\n      this.configured = true;\n\n      Meteor.startup(() => {\n\n        if (typeof PushNotification !== 'undefined') {\n\n          this.push = PushNotification.init(options);\n\n          this.push.on('registration', (data) => {\n\n            // xxx: we need to check that the token has changed before emitting\n            // a new token state - sometimes this event is triggered twice\n            if (data && data.registrationId && this.token !== data.registrationId) {\n              this.token = data.registrationId;\n\n              var token = {\n                [getService()]: data.registrationId\n              };\n              this.log('Push.Token:', token);\n              this.emitState('token', token);\n            }\n\n            this.emitState('registration', ...arguments);\n          });\n\n          this.push.on('notification', (data) => {\n            this.log('Push.Notification:', data);\n            // xxx: check ejson support on \"additionalData\" json object\n\n            if (data.additionalData.ejson) {\n              if (data.additionalData.ejson === ''+data.additionalData.ejson) {\n                try {\n                  data.payload = EJSON.parse(data.additionalData.ejson);\n                  this.log('Push.Parsed.EJSON.Payload:', data.payload);\n                } catch(err) {\n                  this.log('Push.Parsed.EJSON.Payload.Error', err.message, data.payload);\n                }\n              } else {\n                data.payload = EJSON.fromJSONValue(data.additionalData.ejson);\n                this.log('Push.EJSON.Payload:', data.payload);\n              }\n            }\n\n            // Emit alert event - this requires the app to be in forground\n            if (data.message && data.additionalData.foreground) {\n              this.emit('alert', data);\n            }\n\n            // Emit sound event\n            if (data.sound) {\n              this.emit('sound', data);\n            }\n\n            // Emit badge event\n            if (typeof data.count !== 'undefined') {\n              this.log('Push.SettingBadge:', data.count);\n              this.setBadge(data.count);\n              this.emit('badge', data);\n            }\n\n            if (data.additionalData.foreground) {\n              this.log('Push.Message: Got message while app is open:', data);\n              this.emit('message', data);\n            } else {\n              this.log('Push.Startup: Got message while app was closed/in background:', data);\n              this.emitState('startup', data);\n            }\n\n            this.emitState();\n          });\n\n          this.push.on('error', (e) => {\n            this.log('Push.Error:', e);\n            this.emit('error', {\n              type: getService() + '.cordova',\n              error: e.message\n            });\n          });\n\n          this.emitState('ready');\n        }\n\n      });\n\n      initPushUpdates(options.appName);\n    } else {\n      this.log('Push.Error: \"Push.Configure may only be called once\"');\n      throw new Error('Push.Configure may only be called once');\n    }\n  }\n}\n\nPush = new PushHandle();\n"]},"hash":"b839714e44d47f8ba08ad6afd2c480318066c566"}
