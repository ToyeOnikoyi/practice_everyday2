{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/raix:push/lib/server/push.api.js","filenameRelative":"/packages/raix:push/lib/server/push.api.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/raix:push/lib/server/push.api.js.map","sourceFileName":"/packages/raix:push/lib/server/push.api.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"push.api"},"ignored":false,"code":"/*\n  A general purpose user CordovaPush\n  ios, android, mail, twitter?, facebook?, sms?, snailMail? :)\n\n  Phonegap generic :\n  https://github.com/phonegap-build/PushPlugin\n */\n\n// getText / getBinary\n\nPush.setBadge = function () /* id, count */{\n  // throw new Error('Push.setBadge not implemented on the server');\n};\n\nvar isConfigured = false;\n\nPush.Configure = function (options) {\n  var self = this;\n  // https://npmjs.org/package/apn\n\n  // After requesting the certificate from Apple, export your private key as\n  // a .p12 file anddownload the .cer file from the iOS Provisioning Portal.\n\n  // gateway.push.apple.com, port 2195\n  // gateway.sandbox.push.apple.com, port 2195\n\n  // Now, in the directory containing cert.cer and key.p12 execute the\n  // following commands to generate your .pem files:\n  // $ openssl x509 -in cert.cer -inform DER -outform PEM -out cert.pem\n  // $ openssl pkcs12 -in key.p12 -out key.pem -nodes\n\n  // Block multiple calls\n  if (isConfigured) {\n    throw new Error('Push.Configure should not be called more than once!');\n  }\n\n  isConfigured = true;\n\n  // Add debug info\n  if (Push.debug) {\n    console.log('Push.Configure', options);\n  }\n\n  // This function is called when a token is replaced on a device - normally\n  // this should not happen, but if it does we should take action on it\n  _replaceToken = function _replaceToken(currentToken, newToken) {\n    // console.log('Replace token: ' + currentToken + ' -- ' + newToken);\n    // If the server gets a token event its passing in the current token and\n    // the new value - if new value is undefined this empty the token\n    self.emitState('token', currentToken, newToken);\n  };\n\n  // Rig the removeToken callback\n  _removeToken = function _removeToken(token) {\n    // console.log('Remove token: ' + token);\n    // Invalidate the token\n    self.emitState('token', token, null);\n  };\n\n  if (options.apn) {\n    if (Push.debug) {\n      console.log('Push: APN configured');\n    }\n\n    // Allow production to be a general option for push notifications\n    if (options.production === Boolean(options.production)) {\n      options.apn.production = options.production;\n    }\n\n    // Give the user warnings about development settings\n    if (options.apn.development) {\n      // This flag is normally set by the configuration file\n      console.warn('WARNING: Push APN is using development key and certificate');\n    } else {\n      // We check the apn gateway i the options, we could risk shipping\n      // server into production while using the production configuration.\n      // On the other hand we could be in development but using the production\n      // configuration. And finally we could have configured an unknown apn\n      // gateway (this could change in the future - but a warning about typos\n      // can save hours of debugging)\n      //\n      // Warn about gateway configurations - it's more a guide\n      if (options.apn.gateway) {\n\n        if (options.apn.gateway === 'gateway.sandbox.push.apple.com') {\n          // Using the development sandbox\n          console.warn('WARNING: Push APN is in development mode');\n        } else if (options.apn.gateway === 'gateway.push.apple.com') {\n          // In production - but warn if we are running on localhost\n          if (/http:\\/\\/localhost/.test(Meteor.absoluteUrl())) {\n            console.warn('WARNING: Push APN is configured to production mode - but server is running' + ' from localhost');\n          }\n        } else {\n          // Warn about gateways we dont know about\n          console.warn('WARNING: Push APN unkown gateway \"' + options.apn.gateway + '\"');\n        }\n      } else {\n        if (options.apn.production) {\n          if (/http:\\/\\/localhost/.test(Meteor.absoluteUrl())) {\n            console.warn('WARNING: Push APN is configured to production mode - but server is running' + ' from localhost');\n          }\n        } else {\n          console.warn('WARNING: Push APN is in development mode');\n        }\n      }\n    }\n\n    // Check certificate data\n    if (!options.apn.certData || !options.apn.certData.length) {\n      console.error('ERROR: Push server could not find certData');\n    }\n\n    // Check key data\n    if (!options.apn.keyData || !options.apn.keyData.length) {\n      console.error('ERROR: Push server could not find keyData');\n    }\n\n    // Rig apn connection\n    var apn = Npm.require('apn');\n    var apnConnection = new apn.Connection(options.apn);\n\n    // Listen to transmission errors - should handle the same way as feedback.\n    apnConnection.on('transmissionError', Meteor.bindEnvironment(function (errCode, notification, recipient) {\n      if (Push.debug) {\n        console.log('Got error code %d for token %s', errCode, notification.token);\n      }\n      if ([2, 5, 8].indexOf(errCode) >= 0) {\n\n        // Invalid token errors...\n        _removeToken({\n          apn: notification.token\n        });\n      }\n    }));\n    // XXX: should we do a test of the connection? It would be nice to know\n    // That the server/certificates/network are correct configured\n\n    // apnConnection.connect().then(function() {\n    //     console.info('CHECK: Push APN connection OK');\n    // }, function(err) {\n    //     console.warn('CHECK: Push APN connection FAILURE');\n    // });\n    // Note: the above code spoils the connection - investigate how to\n    // shutdown/close it.\n\n    self.sendAPN = function (userToken, notification) {\n      if (Match.test(notification.apn, Object)) {\n        notification = _.extend({}, notification, notification.apn);\n      }\n\n      // console.log('sendAPN', notification.from, userToken, notification.title, notification.text,\n      // notification.badge, notification.priority);\n      var priority = notification.priority || notification.priority === 0 ? notification.priority : 10;\n\n      var myDevice = new apn.Device(userToken);\n\n      var note = new apn.Notification();\n\n      note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.\n      if (typeof notification.badge !== 'undefined') {\n        note.badge = notification.badge;\n      }\n      if (typeof notification.sound !== 'undefined') {\n        note.sound = notification.sound;\n      }\n\n      // adds category support for iOS8 custom actions as described here:\n      // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/\n      // RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW36\n      if (typeof notification.category !== 'undefined') {\n        note.category = notification.category;\n      }\n\n      note.alert = notification.text;\n      // Allow the user to set payload data\n      note.payload = notification.payload ? { ejson: EJSON.stringify(notification.payload) } : {};\n\n      note.payload.messageFrom = notification.from;\n      note.priority = priority;\n\n      // Store the token on the note so we can reference it if there was an error\n      note.token = userToken;\n\n      // console.log('I:Send message to: ' + userToken + ' count=' + count);\n\n      apnConnection.pushNotification(note, myDevice);\n    };\n\n    var initFeedback = function initFeedback() {\n      var apn = Npm.require('apn');\n      // console.log('Init feedback');\n      var feedbackOptions = {\n        'batchFeedback': true,\n\n        // Time in SECONDS\n        'interval': 5,\n        production: !options.apn.development,\n        cert: options.certData,\n        key: options.keyData,\n        passphrase: options.passphrase\n      };\n\n      var feedback = new apn.Feedback(feedbackOptions);\n      feedback.on('feedback', function (devices) {\n        devices.forEach(function (item) {\n          // Do something with item.device and item.time;\n          // console.log('A:PUSH FEEDBACK ' + item.device + ' - ' + item.time);\n          // The app is most likely removed from the device, we should\n          // remove the token\n          _removeToken({\n            apn: item.device\n          });\n        });\n      });\n\n      feedback.start();\n    };\n\n    // Init feedback from apn server\n    // This will help keep the appCollection up-to-date, it will help update\n    // and remove token from appCollection.\n    initFeedback();\n  } // EO ios notification\n\n  if (options.gcm && options.gcm.apiKey) {\n    if (Push.debug) {\n      console.log('GCM configured');\n    }\n    //self.sendGCM = function(options.from, userTokens, options.title, options.text, options.badge, options.priority) {\n    self.sendGCM = function (userTokens, notification) {\n      if (Match.test(notification.gcm, Object)) {\n        notification = _.extend({}, notification, notification.gcm);\n      }\n\n      // Make sure userTokens are an array of strings\n      if (userTokens === '' + userTokens) {\n        userTokens = [userTokens];\n      }\n\n      // Check if any tokens in there to send\n      if (!userTokens.length) {\n        if (Push.debug) {\n          console.log('sendGCM no push tokens found');\n        }\n        return;\n      }\n\n      if (Push.debug) {\n        console.log('sendGCM', userTokens, notification);\n      }\n\n      var gcm = Npm.require('node-gcm');\n      var Fiber = Npm.require('fibers');\n\n      // Allow user to set payload\n      var data = notification.payload ? { ejson: EJSON.stringify(notification.payload) } : {};\n\n      data.title = notification.title;\n      data.message = notification.text;\n\n      // Set extra details\n      if (typeof notification.badge !== 'undefined') {\n        data.msgcnt = notification.badge;\n      }\n      if (typeof notification.sound !== 'undefined') {\n        data.soundname = notification.sound;\n      }\n      if (typeof notification.notId !== 'undefined') {\n        data.notId = notification.notId;\n      }\n\n      //var message = new gcm.Message();\n      var message = new gcm.Message({\n        collapseKey: notification.from,\n        //    delayWhileIdle: true,\n        //    timeToLive: 4,\n        //    restricted_package_name: 'dk.gi2.app'\n        data: data\n      });\n\n      if (Push.debug) {\n        console.log('Create GCM Sender using \"' + options.gcm.apiKey + '\"');\n      }\n      var sender = new gcm.Sender(options.gcm.apiKey);\n\n      _.each(userTokens, function (value /*, key */) {\n        if (Push.debug) {\n          console.log('A:Send message to: ' + value);\n        }\n      });\n\n      /*message.addData('title', title);\n      message.addData('message', text);\n      message.addData('msgcnt', '1');\n      message.collapseKey = 'sitDrift';\n      message.delayWhileIdle = true;\n      message.timeToLive = 3;*/\n\n      // /**\n      //  * Parameters: message-literal, userTokens-array, No. of retries, callback-function\n      //  */\n\n      var userToken = userTokens.length === 1 ? userTokens[0] : null;\n\n      sender.send(message, userTokens, 5, function (err, result) {\n        if (err) {\n          if (Push.debug) {\n            console.log('ANDROID ERROR: result of sender: ' + result);\n          }\n        } else {\n          if (result === null) {\n            if (Push.debug) {\n              console.log('ANDROID: Result of sender is null');\n            }\n            return;\n          }\n          if (Push.debug) {\n            console.log('ANDROID: Result of sender: ' + JSON.stringify(result));\n          }\n          if (result.canonical_ids === 1 && userToken) {\n            // jshint ignore:line\n\n            // This is an old device, token is replaced\n            Fiber(function (self) {\n              // Run in fiber\n              try {\n                self.callback(self.oldToken, self.newToken);\n              } catch (err) {}\n            }).run({\n              oldToken: { gcm: userToken },\n              newToken: { gcm: result.results[0].registration_id }, // jshint ignore:line\n              callback: _replaceToken\n            });\n            //_replaceToken({ gcm: userToken }, { gcm: result.results[0].registration_id });\n          }\n          // We cant send to that token - might not be registred\n          // ask the user to remove the token from the list\n          if (result.failure !== 0 && userToken) {\n\n            // This is an old device, token is replaced\n            Fiber(function (self) {\n              // Run in fiber\n              try {\n                self.callback(self.token);\n              } catch (err) {}\n            }).run({\n              token: { gcm: userToken },\n              callback: _removeToken\n            });\n            //_replaceToken({ gcm: userToken }, { gcm: result.results[0].registration_id });\n          }\n        }\n      });\n      // /** Use the following line if you want to send the message without retries\n      // sender.sendNoRetry(message, userTokens, function (result) {\n      //     console.log('ANDROID: ' + JSON.stringify(result));\n      // });\n      // **/\n    }; // EO sendAndroid\n  } // EO Android\n\n  // Universal send function\n  var _querySend = function _querySend(query, options) {\n\n    var countApn = [];\n    var countGcm = [];\n\n    Push.appCollection.find(query).forEach(function (app) {\n\n      if (Push.debug) {\n        console.log('send to token', app.token);\n      }\n\n      if (app.token.apn) {\n        countApn.push(app._id);\n        // Send to APN\n        if (self.sendAPN) {\n          self.sendAPN(app.token.apn, options);\n        }\n      } else if (app.token.gcm) {\n        countGcm.push(app._id);\n\n        // Send to GCM\n        // We do support multiple here - so we should construct an array\n        // and send it bulk - Investigate limit count of id's\n        if (self.sendGCM) {\n          self.sendGCM(app.token.gcm, options);\n        }\n      } else {\n        throw new Error('Push.send got a faulty query');\n      }\n    });\n\n    if (Push.debug) {\n\n      console.log('Push: Sent message \"' + options.title + '\" to ' + countApn.length + ' ios apps ' + countGcm.length + ' android apps');\n\n      // Add some verbosity about the send result, making sure the developer\n      // understands what just happened.\n      if (!countApn.length && !countGcm.length) {\n        if (Push.appCollection.find().count() === 0) {\n          console.log('Push, GUIDE: The \"Push.appCollection\" is empty -' + ' No clients have registred on the server yet...');\n        }\n      } else if (!countApn.length) {\n        if (Push.appCollection.find({ 'token.apn': { $exists: true } }).count() === 0) {\n          console.log('Push, GUIDE: The \"Push.appCollection\" - No APN clients have registred on the server yet...');\n        }\n      } else if (!countGcm.length) {\n        if (Push.appCollection.find({ 'token.gcm': { $exists: true } }).count() === 0) {\n          console.log('Push, GUIDE: The \"Push.appCollection\" - No GCM clients have registred on the server yet...');\n        }\n      }\n    }\n\n    return {\n      apn: countApn,\n      gcm: countGcm\n    };\n  };\n\n  self.serverSend = function (options) {\n    options = options || { badge: 0 };\n    var query;\n\n    // Check basic options\n    if (options.from !== '' + options.from) {\n      throw new Error('Push.send: option \"from\" not a string');\n    }\n\n    if (options.title !== '' + options.title) {\n      throw new Error('Push.send: option \"title\" not a string');\n    }\n\n    if (options.text !== '' + options.text) {\n      throw new Error('Push.send: option \"text\" not a string');\n    }\n\n    if (options.token || options.tokens) {\n\n      // The user set one token or array of tokens\n      var tokenList = options.token ? [options.token] : options.tokens;\n\n      if (Push.debug) {\n        console.log('Push: Send message \"' + options.title + '\" via token(s)', tokenList);\n      }\n\n      query = {\n        $or: [\n        // XXX: Test this query: can we hand in a list of push tokens?\n        { $and: [{ token: { $in: tokenList } },\n          // And is not disabled\n          { enabled: { $ne: false } }]\n        },\n        // XXX: Test this query: does this work on app id?\n        { $and: [{ _in: { $in: tokenList } }, // one of the app ids\n          { $or: [{ 'token.apn': { $exists: true } }, // got apn token\n            { 'token.gcm': { $exists: true } } // got gcm token\n            ] },\n          // And is not disabled\n          { enabled: { $ne: false } }]\n        }]\n      };\n    } else if (options.query) {\n\n      if (Push.debug) {\n        console.log('Push: Send message \"' + options.title + '\" via query', options.query);\n      }\n\n      query = {\n        $and: [options.query, // query object\n        { $or: [{ 'token.apn': { $exists: true } }, // got apn token\n          { 'token.gcm': { $exists: true } } // got gcm token\n          ] },\n        // And is not disabled\n        { enabled: { $ne: false } }]\n      };\n    }\n\n    if (query) {\n\n      // Convert to querySend and return status\n      return _querySend(query, options);\n    } else {\n      throw new Error('Push.send: please set option \"token\"/\"tokens\" or \"query\"');\n    }\n  };\n\n  // This interval will allow only one notification to be sent at a time, it\n  // will check for new notifications at every `options.sendInterval`\n  // (default interval is 15000 ms)\n  //\n  // It looks in notifications collection to see if theres any pending\n  // notifications, if so it will try to reserve the pending notification.\n  // If successfully reserved the send is started.\n  //\n  // If notification.query is type string, it's assumed to be a json string\n  // version of the query selector. Making it able to carry `$` properties in\n  // the mongo collection.\n  //\n  // Pr. default notifications are removed from the collection after send have\n  // completed. Setting `options.keepNotifications` will update and keep the\n  // notification eg. if needed for historical reasons.\n  //\n  // After the send have completed a \"send\" event will be emitted with a\n  // status object containing notification id and the send result object.\n  //\n  var isSendingNotification = false;\n\n  if (options.sendInterval !== null) {\n\n    // This will require index since we sort notifications by createdAt\n    Push.notifications._ensureIndex({ createdAt: 1 });\n\n    Meteor.setInterval(function () {\n\n      if (isSendingNotification) {\n        return;\n      }\n      // Set send fence\n      isSendingNotification = true;\n\n      // var countSent = 0;\n      var batchSize = options.sendBatchSize || 1;\n\n      // Find notifications that are not being or already sent\n      var pendingNotifications = Push.notifications.find({ $and: [\n        // Message is not sent\n        { sent: { $ne: true } },\n        // And not being sent by other instances\n        { sending: { $ne: true } },\n        // And not queued for future\n        { $or: [{ delayUntil: { $exists: false } }, { delayUntil: { $lte: new Date() } }] }] }, {\n        // Sort by created date\n        sort: { createdAt: 1 },\n        limit: batchSize\n      });\n\n      pendingNotifications.forEach(function (notification) {\n        // Reserve notification\n        var reserved = Push.notifications.update({ $and: [\n          // Try to reserve the current notification\n          { _id: notification._id },\n          // Make sure no other instances have reserved it\n          { sending: { $ne: true } }] }, {\n          $set: {\n            // Try to reserve\n            sending: true\n          }\n        });\n\n        // Make sure we only handle notifications reserved by this\n        // instance\n        if (reserved) {\n\n          // Check if query is set and is type String\n          if (notification.query && notification.query === '' + notification.query) {\n            try {\n              // The query is in string json format - we need to parse it\n              notification.query = JSON.parse(notification.query);\n            } catch (err) {\n              // Did the user tamper with this??\n              throw new Error('Push: Error while parsing query string, Error: ' + err.message);\n            }\n          }\n\n          // Send the notification\n          var result = Push.serverSend(notification);\n\n          if (!options.keepNotifications) {\n            // Pr. Default we will remove notifications\n            Push.notifications.remove({ _id: notification._id });\n          } else {\n\n            // Update the notification\n            Push.notifications.update({ _id: notification._id }, {\n              $set: {\n                // Mark as sent\n                sent: true,\n                // Set the sent date\n                sentAt: new Date(),\n                // Count\n                count: result,\n                // Not being sent anymore\n                sending: false\n              }\n            });\n          }\n\n          // Emit the send\n          self.emit('send', { notification: notification._id, result: result });\n        } // Else could not reserve\n      }); // EO forEach\n\n      // Remove the send fence\n      isSendingNotification = false;\n    }, options.sendInterval || 15000); // Default every 15th sec\n  } else {\n      if (Push.debug) {\n        console.log('Push: Send server is disabled');\n      }\n    }\n};","ast":null,"map":{"version":3,"sources":["/packages/raix:push/lib/server/push.api.js"],"names":[],"mappings":"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","file":"/packages/raix:push/lib/server/push.api.js.map","sourcesContent":["/*\n  A general purpose user CordovaPush\n  ios, android, mail, twitter?, facebook?, sms?, snailMail? :)\n\n  Phonegap generic :\n  https://github.com/phonegap-build/PushPlugin\n */\n\n// getText / getBinary\n\nPush.setBadge = function(/* id, count */) {\n    // throw new Error('Push.setBadge not implemented on the server');\n};\n\nvar isConfigured = false;\n\nPush.Configure = function(options) {\n    var self = this;\n    // https://npmjs.org/package/apn\n\n    // After requesting the certificate from Apple, export your private key as\n    // a .p12 file anddownload the .cer file from the iOS Provisioning Portal.\n\n    // gateway.push.apple.com, port 2195\n    // gateway.sandbox.push.apple.com, port 2195\n\n    // Now, in the directory containing cert.cer and key.p12 execute the\n    // following commands to generate your .pem files:\n    // $ openssl x509 -in cert.cer -inform DER -outform PEM -out cert.pem\n    // $ openssl pkcs12 -in key.p12 -out key.pem -nodes\n\n    // Block multiple calls\n    if (isConfigured) {\n      throw new Error('Push.Configure should not be called more than once!');\n    }\n\n    isConfigured = true;\n\n    // Add debug info\n    if (Push.debug) {\n      console.log('Push.Configure', options);\n    }\n\n    // This function is called when a token is replaced on a device - normally\n    // this should not happen, but if it does we should take action on it\n    _replaceToken = function(currentToken, newToken) {\n        // console.log('Replace token: ' + currentToken + ' -- ' + newToken);\n        // If the server gets a token event its passing in the current token and\n        // the new value - if new value is undefined this empty the token\n        self.emitState('token', currentToken, newToken);\n    };\n\n    // Rig the removeToken callback\n    _removeToken = function(token) {\n        // console.log('Remove token: ' + token);\n        // Invalidate the token\n        self.emitState('token', token, null);\n    };\n\n\n    if (options.apn) {\n        if (Push.debug) {\n          console.log('Push: APN configured');\n        }\n\n        // Allow production to be a general option for push notifications\n        if (options.production === Boolean(options.production)) {\n          options.apn.production = options.production;\n        }\n\n        // Give the user warnings about development settings\n        if (options.apn.development) {\n          // This flag is normally set by the configuration file\n          console.warn('WARNING: Push APN is using development key and certificate');\n        } else {\n          // We check the apn gateway i the options, we could risk shipping\n          // server into production while using the production configuration.\n          // On the other hand we could be in development but using the production\n          // configuration. And finally we could have configured an unknown apn\n          // gateway (this could change in the future - but a warning about typos\n          // can save hours of debugging)\n          //\n          // Warn about gateway configurations - it's more a guide\n          if (options.apn.gateway) {\n\n              if (options.apn.gateway === 'gateway.sandbox.push.apple.com') {\n                  // Using the development sandbox\n                  console.warn('WARNING: Push APN is in development mode');\n              } else if (options.apn.gateway === 'gateway.push.apple.com') {\n                  // In production - but warn if we are running on localhost\n                  if (/http:\\/\\/localhost/.test(Meteor.absoluteUrl())) {\n                      console.warn('WARNING: Push APN is configured to production mode - but server is running' +\n                        ' from localhost');\n                  }\n              } else {\n                  // Warn about gateways we dont know about\n                  console.warn('WARNING: Push APN unkown gateway \"' + options.apn.gateway + '\"');\n              }\n\n          } else {\n              if (options.apn.production) {\n                  if (/http:\\/\\/localhost/.test(Meteor.absoluteUrl())) {\n                      console.warn('WARNING: Push APN is configured to production mode - but server is running' +\n                        ' from localhost');\n                  }\n              } else {\n                  console.warn('WARNING: Push APN is in development mode');\n              }\n          }\n\n        }\n\n        // Check certificate data\n        if (!options.apn.certData || !options.apn.certData.length) {\n          console.error('ERROR: Push server could not find certData');\n        }\n\n        // Check key data\n        if (!options.apn.keyData || !options.apn.keyData.length) {\n          console.error('ERROR: Push server could not find keyData');\n        }\n\n        // Rig apn connection\n        var apn = Npm.require('apn');\n        var apnConnection = new apn.Connection( options.apn );\n\n        // Listen to transmission errors - should handle the same way as feedback.\n        apnConnection.on('transmissionError', Meteor.bindEnvironment(function (errCode, notification, recipient) {\n          if (Push.debug) {\n            console.log('Got error code %d for token %s', errCode, notification.token);\n          }\n          if ([2, 5, 8].indexOf(errCode) >= 0) {\n\n\n            // Invalid token errors...\n            _removeToken({\n              apn: notification.token\n            });\n          }\n        }));\n        // XXX: should we do a test of the connection? It would be nice to know\n        // That the server/certificates/network are correct configured\n\n        // apnConnection.connect().then(function() {\n        //     console.info('CHECK: Push APN connection OK');\n        // }, function(err) {\n        //     console.warn('CHECK: Push APN connection FAILURE');\n        // });\n        // Note: the above code spoils the connection - investigate how to\n        // shutdown/close it.\n\n        self.sendAPN = function(userToken, notification) {\n            if (Match.test(notification.apn, Object)) {\n              notification = _.extend({}, notification, notification.apn);\n            }\n\n            // console.log('sendAPN', notification.from, userToken, notification.title, notification.text,\n            // notification.badge, notification.priority);\n            var priority = (notification.priority || notification.priority === 0)? notification.priority : 10;\n\n            var myDevice = new apn.Device(userToken);\n\n            var note = new apn.Notification();\n\n            note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.\n            if (typeof notification.badge !== 'undefined') {\n              note.badge = notification.badge;\n            }\n            if (typeof notification.sound !== 'undefined') {\n              note.sound = notification.sound;\n            }\n\n            // adds category support for iOS8 custom actions as described here:\n            // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/\n            // RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW36\n            if (typeof notification.category !== 'undefined') {\n              note.category = notification.category;\n            }\n\n            note.alert = notification.text;\n            // Allow the user to set payload data\n            note.payload = (notification.payload) ? { ejson: EJSON.stringify(notification.payload) } : {};\n\n            note.payload.messageFrom = notification.from;\n            note.priority = priority;\n\n\n            // Store the token on the note so we can reference it if there was an error\n            note.token = userToken;\n\n            // console.log('I:Send message to: ' + userToken + ' count=' + count);\n\n            apnConnection.pushNotification(note, myDevice);\n\n        };\n\n\n        var initFeedback = function () {\n            var apn = Npm.require('apn');\n            // console.log('Init feedback');\n            var feedbackOptions = {\n                'batchFeedback': true,\n\n                // Time in SECONDS\n                'interval': 5,\n                production: !options.apn.development,\n                cert: options.certData,\n                key: options.keyData,\n                passphrase: options.passphrase\n            };\n\n            var feedback = new apn.Feedback(feedbackOptions);\n            feedback.on('feedback', function (devices) {\n                devices.forEach(function (item) {\n                    // Do something with item.device and item.time;\n                    // console.log('A:PUSH FEEDBACK ' + item.device + ' - ' + item.time);\n                    // The app is most likely removed from the device, we should\n                    // remove the token\n                    _removeToken({\n                        apn: item.device\n                    });\n                });\n            });\n\n            feedback.start();\n        };\n\n        // Init feedback from apn server\n        // This will help keep the appCollection up-to-date, it will help update\n        // and remove token from appCollection.\n        initFeedback();\n\n    } // EO ios notification\n\n    if (options.gcm && options.gcm.apiKey) {\n        if (Push.debug) {\n          console.log('GCM configured');\n        }\n        //self.sendGCM = function(options.from, userTokens, options.title, options.text, options.badge, options.priority) {\n        self.sendGCM = function(userTokens, notification) {\n            if (Match.test(notification.gcm, Object)) {\n              notification = _.extend({}, notification, notification.gcm);\n            }\n\n            // Make sure userTokens are an array of strings\n            if (userTokens === ''+userTokens) {\n              userTokens = [userTokens];\n            }\n\n            // Check if any tokens in there to send\n            if (!userTokens.length) {\n                if (Push.debug) {\n                  console.log('sendGCM no push tokens found');\n                }\n                return;\n            }\n\n            if (Push.debug) {\n              console.log('sendGCM', userTokens, notification);\n            }\n\n            var gcm = Npm.require('node-gcm');\n            var Fiber = Npm.require('fibers');\n\n            // Allow user to set payload\n            var data = (notification.payload) ? { ejson: EJSON.stringify(notification.payload) } : {};\n\n            data.title = notification.title;\n            data.message = notification.text;\n\n            // Set extra details\n            if (typeof notification.badge !== 'undefined') {\n              data.msgcnt = notification.badge;\n            }\n            if (typeof notification.sound !== 'undefined') {\n              data.soundname = notification.sound;\n            }\n            if (typeof notification.notId !== 'undefined') {\n              data.notId = notification.notId;\n            }\n\n            //var message = new gcm.Message();\n            var message = new gcm.Message({\n                collapseKey: notification.from,\n            //    delayWhileIdle: true,\n            //    timeToLive: 4,\n            //    restricted_package_name: 'dk.gi2.app'\n                data: data\n            });\n\n            if (Push.debug) {\n              console.log('Create GCM Sender using \"' + options.gcm.apiKey + '\"');\n            }\n            var sender = new gcm.Sender(options.gcm.apiKey);\n\n            _.each(userTokens, function(value /*, key */) {\n                if (Push.debug) {\n                  console.log('A:Send message to: ' + value);\n                }\n            });\n\n            /*message.addData('title', title);\n            message.addData('message', text);\n            message.addData('msgcnt', '1');\n            message.collapseKey = 'sitDrift';\n            message.delayWhileIdle = true;\n            message.timeToLive = 3;*/\n\n            // /**\n            //  * Parameters: message-literal, userTokens-array, No. of retries, callback-function\n            //  */\n\n            var userToken = (userTokens.length === 1)?userTokens[0]:null;\n\n            sender.send(message, userTokens, 5, function (err, result) {\n                if (err) {\n                    if (Push.debug) {\n                      console.log('ANDROID ERROR: result of sender: ' + result);\n                    }\n                } else {\n                    if (result === null) {\n                      if (Push.debug) {\n                        console.log('ANDROID: Result of sender is null');\n                      }\n                      return;\n                    }\n                    if (Push.debug) {\n                      console.log('ANDROID: Result of sender: ' + JSON.stringify(result));\n                    }\n                    if (result.canonical_ids === 1 && userToken) { // jshint ignore:line\n\n                        // This is an old device, token is replaced\n                        Fiber(function(self) {\n                            // Run in fiber\n                            try {\n                                self.callback(self.oldToken, self.newToken);\n                            } catch(err) {\n\n                            }\n\n                        }).run({\n                            oldToken: { gcm: userToken },\n                            newToken: { gcm: result.results[0].registration_id }, // jshint ignore:line\n                            callback: _replaceToken\n                        });\n                        //_replaceToken({ gcm: userToken }, { gcm: result.results[0].registration_id });\n\n                    }\n                    // We cant send to that token - might not be registred\n                    // ask the user to remove the token from the list\n                    if (result.failure !== 0 && userToken) {\n\n                        // This is an old device, token is replaced\n                        Fiber(function(self) {\n                            // Run in fiber\n                            try {\n                                self.callback(self.token);\n                            } catch(err) {\n\n                            }\n\n                        }).run({\n                            token: { gcm: userToken },\n                            callback: _removeToken\n                        });\n                        //_replaceToken({ gcm: userToken }, { gcm: result.results[0].registration_id });\n\n                    }\n\n                }\n            });\n            // /** Use the following line if you want to send the message without retries\n            // sender.sendNoRetry(message, userTokens, function (result) {\n            //     console.log('ANDROID: ' + JSON.stringify(result));\n            // });\n            // **/\n        }; // EO sendAndroid\n\n    } // EO Android\n\n    // Universal send function\n    var _querySend = function(query, options) {\n\n      var countApn = [];\n      var countGcm = [];\n\n        Push.appCollection.find(query).forEach(function(app) {\n\n          if (Push.debug) {\n            console.log('send to token', app.token);\n          }\n\n            if (app.token.apn) {\n              countApn.push(app._id);\n                // Send to APN\n                if (self.sendAPN) {\n                  self.sendAPN(app.token.apn, options);\n                }\n\n            } else if (app.token.gcm) {\n              countGcm.push(app._id);\n\n                // Send to GCM\n                // We do support multiple here - so we should construct an array\n                // and send it bulk - Investigate limit count of id's\n                if (self.sendGCM) {\n                  self.sendGCM(app.token.gcm, options);\n                }\n\n            } else {\n                throw new Error('Push.send got a faulty query');\n            }\n\n        });\n\n        if (Push.debug) {\n\n          console.log('Push: Sent message \"' + options.title + '\" to ' + countApn.length + ' ios apps ' +\n            countGcm.length + ' android apps');\n\n          // Add some verbosity about the send result, making sure the developer\n          // understands what just happened.\n          if (!countApn.length && !countGcm.length) {\n            if (Push.appCollection.find().count() === 0) {\n              console.log('Push, GUIDE: The \"Push.appCollection\" is empty -' +\n                ' No clients have registred on the server yet...');\n            }\n          } else if (!countApn.length) {\n            if (Push.appCollection.find({ 'token.apn': { $exists: true } }).count() === 0) {\n              console.log('Push, GUIDE: The \"Push.appCollection\" - No APN clients have registred on the server yet...');\n            }\n          } else if (!countGcm.length) {\n            if (Push.appCollection.find({ 'token.gcm': { $exists: true } }).count() === 0) {\n              console.log('Push, GUIDE: The \"Push.appCollection\" - No GCM clients have registred on the server yet...');\n            }\n          }\n\n        }\n\n        return {\n          apn: countApn,\n          gcm: countGcm\n        };\n    };\n\n    self.serverSend = function(options) {\n      options = options || { badge: 0 };\n      var query;\n\n      // Check basic options\n      if (options.from !== ''+options.from) {\n        throw new Error('Push.send: option \"from\" not a string');\n      }\n\n      if (options.title !== ''+options.title) {\n        throw new Error('Push.send: option \"title\" not a string');\n      }\n\n      if (options.text !== ''+options.text) {\n        throw new Error('Push.send: option \"text\" not a string');\n      }\n\n      if (options.token || options.tokens) {\n\n        // The user set one token or array of tokens\n        var tokenList = (options.token)? [options.token] : options.tokens;\n\n        if (Push.debug) {\n          console.log('Push: Send message \"' + options.title + '\" via token(s)', tokenList);\n        }\n\n        query = {\n          $or: [\n              // XXX: Test this query: can we hand in a list of push tokens?\n              { $and: [\n                  { token: { $in: tokenList } },\n                  // And is not disabled\n                  { enabled: { $ne: false }}\n                ]\n              },\n              // XXX: Test this query: does this work on app id?\n              { $and: [\n                  { _in: { $in: tokenList } }, // one of the app ids\n                  { $or: [\n                      { 'token.apn': { $exists: true }  }, // got apn token\n                      { 'token.gcm': { $exists: true }  }  // got gcm token\n                  ]},\n                  // And is not disabled\n                  { enabled: { $ne: false }}\n                ]\n              }\n          ]\n        };\n\n      } else if (options.query) {\n\n        if (Push.debug) {\n          console.log('Push: Send message \"' + options.title + '\" via query', options.query);\n        }\n\n        query = {\n          $and: [\n              options.query, // query object\n              { $or: [\n                  { 'token.apn': { $exists: true }  }, // got apn token\n                  { 'token.gcm': { $exists: true }  }  // got gcm token\n              ]},\n              // And is not disabled\n              { enabled: { $ne: false }}\n          ]\n        };\n      }\n\n\n      if (query) {\n\n        // Convert to querySend and return status\n        return _querySend(query, options);\n\n      } else {\n        throw new Error('Push.send: please set option \"token\"/\"tokens\" or \"query\"');\n      }\n\n    };\n\n\n    // This interval will allow only one notification to be sent at a time, it\n    // will check for new notifications at every `options.sendInterval`\n    // (default interval is 15000 ms)\n    //\n    // It looks in notifications collection to see if theres any pending\n    // notifications, if so it will try to reserve the pending notification.\n    // If successfully reserved the send is started.\n    //\n    // If notification.query is type string, it's assumed to be a json string\n    // version of the query selector. Making it able to carry `$` properties in\n    // the mongo collection.\n    //\n    // Pr. default notifications are removed from the collection after send have\n    // completed. Setting `options.keepNotifications` will update and keep the\n    // notification eg. if needed for historical reasons.\n    //\n    // After the send have completed a \"send\" event will be emitted with a\n    // status object containing notification id and the send result object.\n    //\n    var isSendingNotification = false;\n\n    if (options.sendInterval !== null) {\n\n      // This will require index since we sort notifications by createdAt\n      Push.notifications._ensureIndex({ createdAt: 1 });\n\n      Meteor.setInterval(function() {\n\n          if (isSendingNotification) {\n              return;\n          }\n          // Set send fence\n          isSendingNotification = true;\n\n          // var countSent = 0;\n          var batchSize = options.sendBatchSize || 1;\n\n          // Find notifications that are not being or already sent\n          var pendingNotifications = Push.notifications.find({ $and: [\n                // Message is not sent\n                { sent : { $ne: true } },\n                // And not being sent by other instances\n                { sending: { $ne: true } },\n                // And not queued for future\n                { $or: [ { delayUntil: { $exists: false } }, { delayUntil:  { $lte: new Date() } } ] }\n            ]}, {\n              // Sort by created date\n              sort: { createdAt: 1 },\n              limit: batchSize\n            });\n\n          pendingNotifications.forEach(function(notification) {\n              // Reserve notification\n              var reserved = Push.notifications.update({ $and: [\n                // Try to reserve the current notification\n                { _id: notification._id },\n                // Make sure no other instances have reserved it\n                { sending: { $ne: true } }\n              ]}, {\n                $set: {\n                  // Try to reserve\n                  sending: true\n                }\n              });\n\n              // Make sure we only handle notifications reserved by this\n              // instance\n              if (reserved) {\n\n                // Check if query is set and is type String\n                if (notification.query && notification.query === ''+notification.query) {\n                  try {\n                    // The query is in string json format - we need to parse it\n                    notification.query = JSON.parse(notification.query);\n                  } catch(err) {\n                    // Did the user tamper with this??\n                    throw new Error('Push: Error while parsing query string, Error: ' + err.message);\n                  }\n                }\n\n                // Send the notification\n                var result = Push.serverSend(notification);\n\n                if (!options.keepNotifications) {\n                    // Pr. Default we will remove notifications\n                    Push.notifications.remove({ _id: notification._id });\n                } else {\n\n                    // Update the notification\n                    Push.notifications.update({ _id: notification._id }, {\n                        $set: {\n                          // Mark as sent\n                          sent: true,\n                          // Set the sent date\n                          sentAt: new Date(),\n                          // Count\n                          count: result,\n                          // Not being sent anymore\n                          sending: false\n                        }\n                    });\n\n                }\n\n                // Emit the send\n                self.emit('send', { notification: notification._id, result: result });\n\n              } // Else could not reserve\n\n          }); // EO forEach\n\n          // Remove the send fence\n          isSendingNotification = false;\n      }, options.sendInterval || 15000); // Default every 15th sec\n\n    } else {\n      if (Push.debug) {\n        console.log('Push: Send server is disabled');\n      }\n    }\n\n};\n"]},"hash":"3661a00bbf15e4cdd165a3f5bdad4d7b158f2d38"}
