{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/raix:push/lib/client/client.js","filenameRelative":"/packages/raix:push/lib/client/client.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/raix:push/lib/client/client.js.map","sourceFileName":"/packages/raix:push/lib/client/client.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"client"},"ignored":false,"code":"// Namespaced storage key\nvar localStorageKey = '_raix:push_token';\n\n// If we are using the accounts system then add the userId to appCollection\n// and monitor for logout\nvar addUserId = !!Package['accounts-base'];\n\n/*\n  1. Check if id is already set in localstorage\n  2. If not then create an app id\n  3. Refresh the apn/gcm push token for this app\n*/\n\nvar loadLocalstorage = function loadLocalstorage() {\n  var data = {};\n\n  try {\n    // Get the stored object from local storage\n    data = JSON.parse(localStorage.getItem(localStorageKey));\n  } catch (err) {\n    // XXX: Error using the local storage\n  }\n\n  return {\n    // Use a new id if not set\n    id: data && data.id || Random.id(),\n    // Set empty metadata object if nothing loaded\n    metadata: data && data.metadata || {},\n    // Set default token\n    token: null\n  };\n};\n\nvar saveLocalstorage = function saveLocalstorage(data) {\n  try {\n    // Try setting the id\n    localStorage.setItem(localStorageKey, JSON.stringify(data));\n  } catch (err) {\n    // XXX: storage error\n  }\n};\n\n// Set stored object\nvar stored = loadLocalstorage();\n// Reactive id\nvar idDep = new Tracker.Dependency();\nvar stateDep = new Tracker.Dependency();\n\n// Its either set by localStorage or random\nidDep.changed();\n\nvar _setEnabled = function _setEnabled(state) {\n  if (stored.enabled !== state) {\n    stored.enabled = state;\n    // Save the stored object\n    saveLocalstorage(stored);\n    stateDep.changed();\n  }\n};\n\nPush.id = function () {\n  idDep.depend();\n  return stored.id;\n};\n\nPush.enabled = function (state) {\n  if (stored) {\n    if (typeof state === 'undefined') {\n      // Act as a getter\n      stateDep.depend();\n      return stored.enabled !== false;\n    } else {\n      check(state, Boolean);\n      if (state !== stored.enabled && stored.id) {\n        // Latency compensation\n        _setEnabled(state);\n        // Update server\n        Meteor.call('raix:push-enable', {\n          id: stored.id,\n          enabled: state\n        }, function (err, found) {\n          if (err || !found) {\n            // On error or missing app item, revert\n            _setEnabled(!state);\n          }\n        });\n      }\n    }\n  }\n};\n\nPush.setUser = function () {\n  // Let the server update the userId on the id\n  Meteor.call('raix:push-setuser', stored.id);\n};\n\nPush.setMetadata = function (data) {\n  stored.metadata = data;\n  saveLocalstorage(stored);\n  // Set the metadata on the server collection if we have a token, otherwise\n  // we should only set the metadata in localstorage\n  if (stored.token) {\n    // Update the metadata\n    Meteor.call('raix:push-metadata', {\n      id: stored.id,\n      metadata: stored.metadata\n    });\n  }\n};\n\n// Report token to the server\nvar reportTokenToServer = function reportTokenToServer(token, appName) {\n  // Store the token\n  stored.token = token;\n\n  // Set the data object\n  var data = {\n    id: stored.id,\n    token: token,\n    appName: appName,\n    userId: addUserId ? Meteor.userId() : null,\n    metadata: stored.metadata\n  };\n\n  // token.gcm or token.apn\n  Meteor.call('raix:push-update', data, function (err, result) {\n    if (!err && result) {\n      // The result is the id - The server may update this if it finds a\n      // match for an old install\n      if (stored.id !== result._id) {\n        // The server did match the push token for this device\n        stored.id = result._id;\n        // Save the stored object\n        saveLocalstorage(stored);\n        // The id has changed.\n        idDep.changed();\n      }\n\n      // Make sure enabled is also updated to keep in sync\n      if (typeof result.enabled !== 'undefined') {\n        _setEnabled(result.enabled);\n      }\n    }\n  });\n};\n\ninitPushUpdates = function initPushUpdates(appName) {\n  Meteor.startup(function () {\n    // Start listening for tokens\n    Push.on('token', function (token) {\n      if (Push.debug) {\n        console.log('Got token:', token);\n      }\n      // The app should be ready, lets call in\n      reportTokenToServer(token, appName || 'main');\n    });\n\n    // Start listening for user updates if accounts package is added\n    if (addUserId) {\n      Tracker.autorun(function () {\n        // Depend on the userId\n        Meteor.userId();\n        // Dont run this the first time, its already done in the reportTokenToServer\n        if (!this.firstRun) {\n          // Update the userId\n          Push.setUser();\n        }\n      });\n    }\n  });\n};","ast":null,"map":{"version":3,"sources":["/packages/raix:push/lib/client/client.js"],"names":[],"mappings":"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","file":"/packages/raix:push/lib/client/client.js.map","sourcesContent":["// Namespaced storage key\nvar localStorageKey = '_raix:push_token';\n\n// If we are using the accounts system then add the userId to appCollection\n// and monitor for logout\nvar addUserId = !!Package['accounts-base'];\n\n/*\n  1. Check if id is already set in localstorage\n  2. If not then create an app id\n  3. Refresh the apn/gcm push token for this app\n*/\n\nvar loadLocalstorage = function() {\n  var data = {};\n\n  try {\n    // Get the stored object from local storage\n    data = JSON.parse(localStorage.getItem(localStorageKey));\n\n  } catch(err) {\n    // XXX: Error using the local storage\n  }\n\n  return {\n    // Use a new id if not set\n    id: data && data.id || Random.id(),\n    // Set empty metadata object if nothing loaded\n    metadata: data && data.metadata || {},\n    // Set default token\n    token: null\n  };\n};\n\nvar saveLocalstorage = function(data) {\n  try {\n    // Try setting the id\n    localStorage.setItem(localStorageKey, JSON.stringify(data));\n  } catch(err) {\n    // XXX: storage error\n  }\n};\n\n// Set stored object\nvar stored = loadLocalstorage();\n// Reactive id\nvar idDep = new Tracker.Dependency();\nvar stateDep = new Tracker.Dependency();\n\n// Its either set by localStorage or random\nidDep.changed();\n\nvar _setEnabled = function(state) {\n  if (stored.enabled !== state) {\n    stored.enabled = state;\n    // Save the stored object\n    saveLocalstorage(stored);\n    stateDep.changed();\n  }\n};\n\nPush.id = function() {\n  idDep.depend();\n  return stored.id;\n};\n\nPush.enabled = function(state) {\n  if (stored) {\n    if (typeof state === 'undefined') {\n      // Act as a getter\n      stateDep.depend();\n      return stored.enabled !== false;\n    } else {\n      check(state, Boolean);\n      if (state !== stored.enabled && stored.id) {\n        // Latency compensation\n        _setEnabled(state);\n        // Update server\n        Meteor.call('raix:push-enable', {\n          id: stored.id,\n          enabled: state\n        }, function(err, found) {\n          if (err || !found) {\n            // On error or missing app item, revert\n            _setEnabled(!state);\n          }\n        });\n      }\n    }\n  }\n};\n\nPush.setUser = function() {\n  // Let the server update the userId on the id\n  Meteor.call('raix:push-setuser', stored.id);\n};\n\nPush.setMetadata = function(data) {\n  stored.metadata = data;\n  saveLocalstorage(stored);\n  // Set the metadata on the server collection if we have a token, otherwise\n  // we should only set the metadata in localstorage\n  if (stored.token) {\n    // Update the metadata\n    Meteor.call('raix:push-metadata', {\n      id: stored.id,\n      metadata: stored.metadata\n    });\n  }\n};\n\n// Report token to the server\nvar reportTokenToServer = function(token, appName) {\n  // Store the token\n  stored.token = token;\n\n  // Set the data object\n  var data = {\n    id: stored.id,\n    token: token,\n    appName: appName,\n    userId: (addUserId) ? Meteor.userId() : null,\n    metadata: stored.metadata\n  };\n\n  // token.gcm or token.apn\n  Meteor.call('raix:push-update', data, function(err, result) {\n    if (!err && result) {\n      // The result is the id - The server may update this if it finds a\n      // match for an old install\n      if (stored.id !== result._id) {\n        // The server did match the push token for this device\n        stored.id = result._id;\n        // Save the stored object\n        saveLocalstorage(stored);\n        // The id has changed.\n        idDep.changed();\n      }\n\n      // Make sure enabled is also updated to keep in sync\n      if (typeof result.enabled !== 'undefined') {\n        _setEnabled(result.enabled);\n      }\n    }\n  });\n};\n\ninitPushUpdates = function(appName) {\n  Meteor.startup(function() {\n    // Start listening for tokens\n    Push.on('token', function(token) {\n      if (Push.debug) {\n        console.log('Got token:', token);\n      }\n      // The app should be ready, lets call in\n      reportTokenToServer(token, appName || 'main');\n    });\n\n    // Start listening for user updates if accounts package is added\n    if (addUserId) {\n      Tracker.autorun(function() {\n        // Depend on the userId\n        Meteor.userId();\n        // Dont run this the first time, its already done in the reportTokenToServer\n        if (!this.firstRun) {\n          // Update the userId\n          Push.setUser();\n        }\n      });\n    }\n  });\n};\n"]},"hash":"ecc3733d7c1400b43f230e1d14d5f5fc25107e7b"}
