{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/raix:push/lib/client/browser.js","filenameRelative":"/packages/raix:push/lib/client/browser.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/raix:push/lib/client/browser.js.map","sourceFileName":"/packages/raix:push/lib/client/browser.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"browser"},"ignored":false,"code":"/* global chrome: false */\nvar onNotification = function onNotification(notification) {\n  // alert('onNotification' + JSON.stringify(notification));\n\n  // Emit alert event - this requires the app to be in forground\n  if (notification.message && notification.foreground) {\n    Push.emit('alert', notification);\n  }\n\n  // Emit sound event\n  if (notification.sound) {\n    Push.emit('sound', notification);\n  }\n\n  // Emit badge event\n  if (notification.badge) {\n    Push.emit('badge', notification);\n  }\n\n  // If within thres\n  if (notification.open) {\n    Push.emit('startup', notification);\n  } else {\n    Push.emit('message', notification);\n  }\n};\n\nPush.setBadge = function () /* count */{\n  // XXX: Not implemented\n};\n\nvar isConfigured = false;\n\nPush.Configure = function (options) {\n  var self = this;\n\n  options = options || {};\n\n  // check(options, {\n  //   gcm: Match.Optional(Match.ObjectIncluding({\n  //     projectNumber: String\n  //   })),\n  //   apn: Match.Optional(Match.ObjectIncluding({\n  //     webServiceUrl: String,\n  //     websitePushId: String\n  //   })),\n  // });\n\n  // Block multiple calls\n  if (isConfigured) {\n    throw new Error('Push.Configure should not be called more than once!');\n  }\n\n  isConfigured = true;\n\n  // Add debug info\n  if (Push.debug) {\n    console.log('Push.Configure', options);\n  }\n\n  // Client-side security warnings\n  checkClientSecurity(options);\n\n  // Start token updates\n  initPushUpdates(options.appName);\n\n  // Add support for the raix:iframe push solution Deprecate this at some\n  // point mid aug 2015\n  if (options.iframe) {\n\n    var coldstart = true;\n    var startupTime = new Date();\n    var startupThreshold = 1000; // ms\n\n    var _atStartup = function _atStartup() {\n      // If startup time is less than startupThreshold ago then lets say this is\n      // at startup.\n      return new Date() - startupTime < startupThreshold;\n    };\n\n    var _parsePayload = function _parsePayload(value) {\n      // Android actually parses payload into an object - this is not the case with\n      // iOS (here is it just a string)\n      if (value !== '' + value) {\n        value = JSON.stringify(value);\n      }\n\n      // Run the string through ejson\n      try {\n        return EJSON.parse(value);\n      } catch (err) {\n        return { error: err };\n      }\n    };\n\n    // Rig iframe event listeners\n    options.iframe.addEventListener('deviceready', function () {\n\n      // Maintain properties\n\n      // At initial startup set startup time\n      startupTime = new Date();\n\n      // Update flag if app coldstart\n      options.iframe.addEventListener(\"pause\", function () {\n        coldstart = false;\n      }, false);\n\n      options.iframe.addEventListener('resume', function () {\n        // Reset startup time at resume\n        startupTime = new Date();\n      });\n\n      // EO Maintain properties\n\n      options.iframe.addEventListener('pushLaunch', function (e) {\n\n        if (e.event === 'message') {\n          // Android event\n\n          var sound = e.soundname || e.payload.sound;\n\n          // Only prefix sound if actual text found\n          if (sound && sound.length) {\n            sound = '/android_asset/www/' + sound;\n          }\n\n          // XXX: Investigate if we need more defaults\n          var unifiedMessage = {\n            message: e.payload.message || e.msg || '',\n            sound: sound,\n            badge: e.payload.msgcnt,\n            // Coldstart on android is a bit inconsistent - its only set when the\n            // notification opens the app\n            coldstart: e.coldstart === Boolean(e.coldstart) ? e.coldstart : coldstart,\n            background: !e.foreground,\n            foreground: !!e.foreground,\n            // open: _atStartup(),  // This is the iOS implementation\n            open: e.coldstart === Boolean(e.coldstart), // If set true / false its an open event\n            type: 'gcm.cordova'\n          };\n\n          // If payload.ejson this is an object - we hand it over to parsePayload,\n          // parsePayload will do the convertion for us\n          if (e.payload.ejson) {\n            unifiedMessage.payload = _parsePayload(e.payload.ejson);\n          }\n\n          // Trigger notification\n          onNotification(unifiedMessage);\n        } else {\n          // iOS event\n          var sound = e.sound; // jshint ignore: line\n\n          // Only prefix sound if actual text found\n          if (sound && sound.length) {\n            sound = '' + sound;\n          }\n\n          // XXX: Investigate if we need more defaults\n          var unifiedMessage = { // jshint ignore: line\n            message: e.alert,\n            sound: sound,\n            badge: e.badge,\n            coldstart: coldstart,\n            background: !e.foreground,\n            foreground: !!e.foreground,\n            open: _atStartup(),\n            type: 'apn.cordova'\n          };\n\n          // E.ejson should be a string - we send it directly to payload\n          if (e.ejson) {\n            unifiedMessage.payload = _parsePayload(e.ejson);\n          }\n\n          // Trigger notification\n          onNotification(unifiedMessage);\n        }\n      });\n\n      options.iframe.addEventListener('pushSuccess', function (evt) {\n        // Reformat into new event\n        self.emit('register', evt.success);\n      });\n\n      options.iframe.addEventListener('pushToken', function (evt) {\n        if (evt.androidToken) {\n          // Format the android token\n          Push.emitState('token', { gcm: evt.androidToken });\n        } else if (evt.iosToken) {\n          // Format the ios token\n          Push.emitState('token', { apn: evt.iosToken });\n        }\n      });\n\n      options.iframe.addEventListener('pushError', function (evt) {\n        Push.emit('error', { type: 'cordova.browser', error: evt.error || evt });\n      });\n    });\n  } // EO options iframe\n\n  if (typeof chrome !== 'undefined' && chrome.gcm) {\n    // chrome.gcm api is supported!\n    // https://developer.chrome.com/extensions/gcm\n\n    // Set max message size\n    // chrome.gcm.MAX_MESSAGE_SIZE = 4096;\n\n    if (options.gcm.projectNumber) {\n      chrome.gcm.register(options.gcm.projectNumber, function (token) {\n        if (token) {\n          self.emitState('token', { gcm: token });\n        } else {\n          // Error\n          self.emit('error', { type: 'gcm.browser', error: 'Access denied' });\n        }\n      });\n    }\n  } else if ('safari' in window && 'pushNotification' in window.safari) {\n    // https://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/NotificationProgrammingGuideForWebsites/PushNotifications/PushNotifications.html#//apple_ref/doc/uid/TP40013225-CH3-SW1\n\n    if (options.apn) {\n\n      Meteor.startup(function () {\n        // Ensure that the user can receive Safari Push Notifications.\n        var permissionData = window.safari.pushNotification.permission(options.apn.websitePushId);\n        checkRemotePermission(permissionData);\n      });\n\n      var checkRemotePermission = function checkRemotePermission(permissionData) {\n        if (permissionData.permission === 'default') {\n          // This is a new web service URL and its validity is unknown.\n          window.safari.pushNotification.requestPermission(options.apn.webServiceUrl, // The web service URL.\n          options.apn.websitePushId, // The Website Push ID.\n          {}, // Data that you choose to send to your server to help you identify the user.\n          checkRemotePermission // The callback function.\n          );\n        } else if (permissionData.permission === 'denied') {\n            // alert('denied');\n            // The user said no.\n            self.emit('error', { type: 'apn.browser', error: 'Access denied' });\n          } else if (permissionData.permission === 'granted') {\n            // alert('granted');\n            // The web service URL is a valid push provider, and the user said yes.\n            // permissionData.deviceToken is now available to use.\n            self.emitState('token', { apn: permissionData.deviceToken });\n          }\n      };\n    }\n  } else if (navigator && navigator.push && navigator.push.register && navigator.mozSetMessageHandler) {\n    var channel;\n    var pushEndpoint;\n\n    (function () {\n      var setupAppRegistrations = function setupAppRegistrations() {\n        // jshint ignore: line\n        // Issue a register() call\n        // to register to listen for a notification,\n        // you simply call push.register\n        // Here, we'll register a channel for \"email\" updates.\n        // Channels can be for anything the app would like to get notifications for.\n        var requestAccess = navigator.push.register();\n\n        requestAccess.onsuccess = function (e) {\n          // Store the endpoint\n          pushEndpoint = e.target.result;\n\n          self.emitState('token', {\n            SimplePush: {\n              channel: channel,\n              endPoint: pushEndpoint\n            }\n          });\n        };\n      };\n\n      // Once we've registered, the AppServer can send version pings to the EndPoint.\n      // This will trigger a 'push' message to be sent to this handler.\n\n\n      // check navigator.mozPush should be enough?\n      // https://wiki.mozilla.org/WebAPI/SimplePush\n\n      channel = 'push';\n\n      // Store the pushEndpoint\n\n      Meteor.startup(function () {\n        setupAppRegistrations();\n      });\n\n      navigator.mozSetMessageHandler('push', function (message) {\n        if (message.pushEndpoint === pushEndpoint) {\n          // Did we launch or were we already running?\n          self.emit('startup', message);\n        }\n      });\n\n      // // to unregister, you simply call..\n      // AppFramework.addEventListener('user-logout', function() {\n      //   navigator.push.unregister(pushEndpoint);\n      // });\n\n      // error recovery mechanism\n      // will be called very rarely, but application\n      // should register again when it is called\n      navigator.mozSetMessageHandler('register', function () /* e */{\n        setupAppRegistrations();\n      });\n    })();\n  }\n};\n\n/*\nTODO:\n\nadd event listener api\n\n*/","ast":null,"map":{"version":3,"sources":["/packages/raix:push/lib/client/browser.js"],"names":[],"mappings":";AACA,IAAI,iBAAiB,SAAjB,cAAiB,CAAS,YAAT,EAAuB;;;;AAI1C,MAAI,aAAa,OAAb,IAAwB,aAAa,UAAzC,EAAqD;AACnD,SAAK,IAAL,CAAU,OAAV,EAAmB,YAAnB;AACD;;;AAGD,MAAI,aAAa,KAAjB,EAAwB;AACtB,SAAK,IAAL,CAAU,OAAV,EAAmB,YAAnB;AACD;;;AAGD,MAAI,aAAa,KAAjB,EAAwB;AACtB,SAAK,IAAL,CAAU,OAAV,EAAmB,YAAnB;AACD;;;AAGD,MAAI,aAAa,IAAjB,EAAuB;AACrB,SAAK,IAAL,CAAU,SAAV,EAAqB,YAArB;AACD,GAFD,MAEO;AACL,SAAK,IAAL,CAAU,SAAV,EAAqB,YAArB;AACD;AACF,CAxBD;;AA0BA,KAAK,QAAL,GAAgB,Y,WAAsB;;AAErC,CAFD;;AAIA,IAAI,eAAe,KAAnB;;AAEA,KAAK,SAAL,GAAiB,UAAS,OAAT,EAAkB;AACjC,MAAI,OAAO,IAAX;;AAEA,YAAU,WAAW,EAArB;;;;;;;;;;;;;AAaA,MAAI,YAAJ,EAAkB;AAChB,UAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,iBAAe,IAAf;;;AAGA,MAAI,KAAK,KAAT,EAAgB;AACd,YAAQ,GAAR,CAAY,gBAAZ,EAA8B,OAA9B;AACD;;;AAGD,sBAAoB,OAApB;;;AAGA,kBAAgB,QAAQ,OAAxB;;;;AAIA,MAAI,QAAQ,MAAZ,EAAoB;;AAElB,QAAI,YAAY,IAAhB;AACA,QAAI,cAAc,IAAI,IAAJ,EAAlB;AACA,QAAI,mBAAmB,IAAvB,C;;AAEA,QAAI,aAAa,SAAb,UAAa,GAAW;;;AAG1B,aAAQ,IAAI,IAAJ,KAAa,WAAb,GAA2B,gBAAnC;AACD,KAJD;;AAMA,QAAI,gBAAgB,SAAhB,aAAgB,CAAS,KAAT,EAAgB;;;AAGlC,UAAI,UAAU,KAAG,KAAjB,EAAwB;AACtB,gBAAQ,KAAK,SAAL,CAAe,KAAf,CAAR;AACD;;;AAGD,UAAI;AACF,eAAO,MAAM,KAAN,CAAY,KAAZ,CAAP;AACD,OAFD,CAEE,OAAM,GAAN,EAAW;AACX,eAAO,EAAE,OAAO,GAAT,EAAP;AACD;AACF,KAbD;;;AAgBA,YAAQ,MAAR,CAAe,gBAAf,CAAgC,aAAhC,EAA+C,YAAW;;;;;AAKxD,oBAAc,IAAI,IAAJ,EAAd;;;AAGA,cAAQ,MAAR,CAAe,gBAAf,CAAgC,OAAhC,EAAyC,YAAW;AAClD,oBAAY,KAAZ;AACD,OAFD,EAEG,KAFH;;AAIA,cAAQ,MAAR,CAAe,gBAAf,CAAgC,QAAhC,EAA0C,YAAW;;AAEnD,sBAAc,IAAI,IAAJ,EAAd;AACD,OAHD;;;;AAOA,cAAQ,MAAR,CAAe,gBAAf,CAAgC,YAAhC,EAA8C,UAAS,CAAT,EAAY;;AAExD,YAAI,EAAE,KAAF,KAAY,SAAhB,EAA2B;;;AAGzB,cAAI,QAAQ,EAAE,SAAF,IAAe,EAAE,OAAF,CAAU,KAArC;;;AAGA,cAAI,SAAS,MAAM,MAAnB,EAA2B;AACzB,oBAAQ,wBAAwB,KAAhC;AACD;;;AAGD,cAAI,iBAAiB;AACnB,qBAAS,EAAE,OAAF,CAAU,OAAV,IAAqB,EAAE,GAAvB,IAA8B,EADpB;AAEnB,mBAAO,KAFY;AAGnB,mBAAO,EAAE,OAAF,CAAU,MAHE;;;AAMnB,uBAAY,EAAE,SAAF,KAAgB,QAAQ,EAAE,SAAV,CAAjB,GAAyC,EAAE,SAA3C,GAAuD,SAN/C;AAOnB,wBAAY,CAAC,EAAE,UAPI;AAQnB,wBAAY,CAAC,CAAC,EAAE,UARG;;AAUnB,kBAAO,EAAE,SAAF,KAAgB,QAAQ,EAAE,SAAV,CAVJ,E;AAWnB,kBAAM;AAXa,WAArB;;;;AAgBA,cAAI,EAAE,OAAF,CAAU,KAAd,EAAqB;AACnB,2BAAe,OAAf,GAAyB,cAAc,EAAE,OAAF,CAAU,KAAxB,CAAzB;AACD;;;AAGD,yBAAe,cAAf;AAED,SAlCD,MAkCO;;AAEL,cAAI,QAAQ,EAAE,KAAd,C;;;AAGA,cAAI,SAAS,MAAM,MAAnB,EAA2B;AACzB,oBAAQ,KAAK,KAAb;AACD;;;AAGD,cAAI,iBAAiB,E;AACnB,qBAAS,EAAE,KADQ;AAEnB,mBAAO,KAFY;AAGnB,mBAAO,EAAE,KAHU;AAInB,uBAAW,SAJQ;AAKnB,wBAAY,CAAC,EAAE,UALI;AAMnB,wBAAY,CAAC,CAAC,EAAE,UANG;AAOnB,kBAAM,YAPa;AAQnB,kBAAM;AARa,WAArB;;;AAYA,cAAI,EAAE,KAAN,EAAa;AACX,2BAAe,OAAf,GAAyB,cAAc,EAAE,KAAhB,CAAzB;AACD;;;AAGD,yBAAe,cAAf;AAED;AAEF,OAnED;;AAsEA,cAAQ,MAAR,CAAe,gBAAf,CAAgC,aAAhC,EAA+C,UAAS,GAAT,EAAc;;AAE3D,aAAK,IAAL,CAAU,UAAV,EAAsB,IAAI,OAA1B;AACD,OAHD;;AAKA,cAAQ,MAAR,CAAe,gBAAf,CAAgC,WAAhC,EAA6C,UAAS,GAAT,EAAc;AACzD,YAAI,IAAI,YAAR,EAAsB;;AAEpB,eAAK,SAAL,CAAe,OAAf,EAAwB,EAAE,KAAK,IAAI,YAAX,EAAxB;AACD,SAHD,MAGO,IAAI,IAAI,QAAR,EAAkB;;AAEvB,eAAK,SAAL,CAAe,OAAf,EAAwB,EAAE,KAAK,IAAI,QAAX,EAAxB;AACD;AACF,OARD;;AAUA,cAAQ,MAAR,CAAe,gBAAf,CAAgC,WAAhC,EAA6C,UAAS,GAAT,EAAc;AACzD,aAAK,IAAL,CAAU,OAAV,EAAmB,EAAE,MAAM,iBAAR,EAA2B,OAAO,IAAI,KAAJ,IAAa,GAA/C,EAAnB;AACD,OAFD;AAID,KA5GD;AA6GD,G;;AAED,MAAI,OAAO,MAAP,KAAkB,WAAlB,IAAiC,OAAO,GAA5C,EAAiD;;;;;;;AAO/C,QAAI,QAAQ,GAAR,CAAY,aAAhB,EAA+B;AAC7B,aAAO,GAAP,CAAW,QAAX,CAAoB,QAAQ,GAAR,CAAY,aAAhC,EAA+C,UAAS,KAAT,EAAgB;AAC7D,YAAI,KAAJ,EAAW;AACT,eAAK,SAAL,CAAe,OAAf,EAAwB,EAAE,KAAK,KAAP,EAAxB;AACD,SAFD,MAEO;;AAEL,eAAK,IAAL,CAAU,OAAV,EAAmB,EAAE,MAAM,aAAR,EAAuB,OAAO,eAA9B,EAAnB;AACD;AACF,OAPD;AAQD;AAEF,GAlBD,MAkBO,IAAI,YAAY,MAAZ,IAAsB,sBAAsB,OAAO,MAAvD,EAA+D;;;AAGpE,QAAI,QAAQ,GAAZ,EAAiB;;AAEf,aAAO,OAAP,CAAe,YAAW;;AAExB,YAAI,iBAAiB,OAAO,MAAP,CAAc,gBAAd,CAA+B,UAA/B,CAA0C,QAAQ,GAAR,CAAY,aAAtD,CAArB;AACA,8BAAsB,cAAtB;AACD,OAJD;;AAMA,UAAI,wBAAwB,SAAxB,qBAAwB,CAAU,cAAV,EAA0B;AAClD,YAAI,eAAe,UAAf,KAA8B,SAAlC,EAA6C;;AAEzC,iBAAO,MAAP,CAAc,gBAAd,CAA+B,iBAA/B,CACI,QAAQ,GAAR,CAAY,aADhB,E;AAEI,kBAAQ,GAAR,CAAY,aAFhB,E;AAGI,YAHJ,E;AAII,+B;AAJJ;AAMH,SARD,MASK,IAAI,eAAe,UAAf,KAA8B,QAAlC,EAA4C;;;AAG7C,iBAAK,IAAL,CAAU,OAAV,EAAmB,EAAE,MAAM,aAAR,EAAuB,OAAO,eAA9B,EAAnB;AACH,WAJI,MAKA,IAAI,eAAe,UAAf,KAA8B,SAAlC,EAA6C;;;;AAI9C,iBAAK,SAAL,CAAe,OAAf,EAAwB,EAAE,KAAK,eAAe,WAAtB,EAAxB;AACH;AACJ,OArBD;AAuBD;AAGF,GArCM,MAqCA,IAAI,aAAa,UAAU,IAAvB,IAA+B,UAAU,IAAV,CAAe,QAA9C,IAA0D,UAAU,oBAAxE,EAA8F;AAAA,QAI/F,OAJ+F;AAAA,QAO/F,YAP+F;;AAAA;AAAA,UAa1F,qBAb0F,GAanG,SAAS,qBAAT,GAAiC;;;;;;;AAM/B,YAAI,gBAAgB,UAAU,IAAV,CAAe,QAAf,EAApB;;AAEA,sBAAc,SAAd,GAA0B,UAAS,CAAT,EAAY;;AAEpC,yBAAe,EAAE,MAAF,CAAS,MAAxB;;AAEA,eAAK,SAAL,CAAe,OAAf,EAAwB;AACtB,wBAAY;AACV,uBAAS,OADC;AAEV,wBAAU;AAFA;AADU,WAAxB;AAMD,SAVD;AAYD,OAjCkG;;;;;;;;;AAI/F,gBAAU,MAJqF;;;;AASnG,aAAO,OAAP,CAAe,YAAW;AACxB;AACD,OAFD;;AA4BA,gBAAU,oBAAV,CAA+B,MAA/B,EAAuC,UAAS,OAAT,EAAkB;AACrD,YAAI,QAAQ,YAAR,KAAyB,YAA7B,EAA2C;;AAEzC,eAAK,IAAL,CAAU,SAAV,EAAqB,OAArB;AACD;AACF,OALH;;;;;;;;;;AAeA,gBAAU,oBAAV,CAA+B,UAA/B,EAA2C,Y,OAAkB;AAC3D;AACD,OAFD;AApDmG;AA0DpG;AAEF,CAjSD","file":"/packages/raix:push/lib/client/browser.js.map","sourcesContent":["/* global chrome: false */\nvar onNotification = function(notification) {\n  // alert('onNotification' + JSON.stringify(notification));\n\n  // Emit alert event - this requires the app to be in forground\n  if (notification.message && notification.foreground) {\n    Push.emit('alert', notification);\n  }\n\n  // Emit sound event\n  if (notification.sound) {\n    Push.emit('sound', notification);\n  }\n\n  // Emit badge event\n  if (notification.badge) {\n    Push.emit('badge', notification);\n  }\n\n  // If within thres\n  if (notification.open) {\n    Push.emit('startup', notification);\n  } else {\n    Push.emit('message', notification);\n  }\n};\n\nPush.setBadge = function(/* count */) {\n  // XXX: Not implemented\n};\n\nvar isConfigured = false;\n\nPush.Configure = function(options) {\n  var self = this;\n\n  options = options || {};\n\n  // check(options, {\n  //   gcm: Match.Optional(Match.ObjectIncluding({\n  //     projectNumber: String\n  //   })),\n  //   apn: Match.Optional(Match.ObjectIncluding({\n  //     webServiceUrl: String,\n  //     websitePushId: String\n  //   })),\n  // });\n\n  // Block multiple calls\n  if (isConfigured) {\n    throw new Error('Push.Configure should not be called more than once!');\n  }\n\n  isConfigured = true;\n\n  // Add debug info\n  if (Push.debug) {\n    console.log('Push.Configure', options);\n  }\n\n  // Client-side security warnings\n  checkClientSecurity(options);\n\n  // Start token updates\n  initPushUpdates(options.appName);\n\n  // Add support for the raix:iframe push solution Deprecate this at some\n  // point mid aug 2015\n  if (options.iframe) {\n\n    var coldstart = true;\n    var startupTime = new Date();\n    var startupThreshold = 1000; // ms\n\n    var _atStartup = function() {\n      // If startup time is less than startupThreshold ago then lets say this is\n      // at startup.\n      return (new Date() - startupTime < startupThreshold);\n    };\n\n    var _parsePayload = function(value) {\n      // Android actually parses payload into an object - this is not the case with\n      // iOS (here is it just a string)\n      if (value !== ''+value) {\n        value = JSON.stringify(value);\n      }\n\n      // Run the string through ejson\n      try {\n        return EJSON.parse(value);\n      } catch(err) {\n        return { error: err };\n      }\n    };\n\n    // Rig iframe event listeners\n    options.iframe.addEventListener('deviceready', function() {\n\n      // Maintain properties\n\n      // At initial startup set startup time\n      startupTime = new Date();\n\n      // Update flag if app coldstart\n      options.iframe.addEventListener(\"pause\", function() {\n        coldstart = false;\n      }, false);\n\n      options.iframe.addEventListener('resume', function() {\n        // Reset startup time at resume\n        startupTime = new Date();\n      });\n\n      // EO Maintain properties\n\n      options.iframe.addEventListener('pushLaunch', function(e) {\n\n        if (e.event === 'message') {\n          // Android event\n\n          var sound = e.soundname || e.payload.sound;\n\n          // Only prefix sound if actual text found\n          if (sound && sound.length) {\n            sound = '/android_asset/www/' + sound;\n          }\n\n          // XXX: Investigate if we need more defaults\n          var unifiedMessage = {\n            message: e.payload.message || e.msg || '',\n            sound: sound,\n            badge: e.payload.msgcnt,\n            // Coldstart on android is a bit inconsistent - its only set when the\n            // notification opens the app\n            coldstart: (e.coldstart === Boolean(e.coldstart)) ? e.coldstart : coldstart,\n            background: !e.foreground,\n            foreground: !!e.foreground,\n            // open: _atStartup(),  // This is the iOS implementation\n            open: (e.coldstart === Boolean(e.coldstart)), // If set true / false its an open event\n            type: 'gcm.cordova'\n          };\n\n          // If payload.ejson this is an object - we hand it over to parsePayload,\n          // parsePayload will do the convertion for us\n          if (e.payload.ejson) {\n            unifiedMessage.payload = _parsePayload(e.payload.ejson);\n          }\n\n          // Trigger notification\n          onNotification(unifiedMessage);\n\n        } else {\n          // iOS event\n          var sound = e.sound; // jshint ignore: line\n\n          // Only prefix sound if actual text found\n          if (sound && sound.length) {\n            sound = '' + sound;\n          }\n\n          // XXX: Investigate if we need more defaults\n          var unifiedMessage = { // jshint ignore: line\n            message: e.alert,\n            sound: sound,\n            badge: e.badge,\n            coldstart: coldstart,\n            background: !e.foreground,\n            foreground: !!e.foreground,\n            open: _atStartup(),\n            type: 'apn.cordova'\n          };\n\n          // E.ejson should be a string - we send it directly to payload\n          if (e.ejson) {\n            unifiedMessage.payload = _parsePayload(e.ejson);\n          }\n\n          // Trigger notification\n          onNotification(unifiedMessage);\n\n        }\n\n      });\n\n\n      options.iframe.addEventListener('pushSuccess', function(evt) {\n        // Reformat into new event\n        self.emit('register', evt.success);\n      });\n\n      options.iframe.addEventListener('pushToken', function(evt) {\n        if (evt.androidToken) {\n          // Format the android token\n          Push.emitState('token', { gcm: evt.androidToken });\n        } else if (evt.iosToken) {\n          // Format the ios token\n          Push.emitState('token', { apn: evt.iosToken });\n        }\n      });\n\n      options.iframe.addEventListener('pushError', function(evt) {\n        Push.emit('error', { type: 'cordova.browser', error: evt.error || evt });\n      });\n\n    });\n  } // EO options iframe\n\n  if (typeof chrome !== 'undefined' && chrome.gcm) {\n    // chrome.gcm api is supported!\n    // https://developer.chrome.com/extensions/gcm\n\n    // Set max message size\n    // chrome.gcm.MAX_MESSAGE_SIZE = 4096;\n\n    if (options.gcm.projectNumber) {\n      chrome.gcm.register(options.gcm.projectNumber, function(token) {\n        if (token) {\n          self.emitState('token', { gcm: token });\n        } else {\n          // Error\n          self.emit('error', { type: 'gcm.browser', error: 'Access denied' });\n        }\n      });\n    }\n\n  } else if ('safari' in window && 'pushNotification' in window.safari) {\n    // https://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/NotificationProgrammingGuideForWebsites/PushNotifications/PushNotifications.html#//apple_ref/doc/uid/TP40013225-CH3-SW1\n\n    if (options.apn) {\n\n      Meteor.startup(function() {\n        // Ensure that the user can receive Safari Push Notifications.\n        var permissionData = window.safari.pushNotification.permission(options.apn.websitePushId);\n        checkRemotePermission(permissionData);\n      });\n\n      var checkRemotePermission = function (permissionData) {\n          if (permissionData.permission === 'default') {\n              // This is a new web service URL and its validity is unknown.\n              window.safari.pushNotification.requestPermission(\n                  options.apn.webServiceUrl, // The web service URL.\n                  options.apn.websitePushId, // The Website Push ID.\n                  {}, // Data that you choose to send to your server to help you identify the user.\n                  checkRemotePermission         // The callback function.\n              );\n          }\n          else if (permissionData.permission === 'denied') {\n              // alert('denied');\n              // The user said no.\n              self.emit('error', { type: 'apn.browser', error: 'Access denied' });\n          }\n          else if (permissionData.permission === 'granted') {\n              // alert('granted');\n              // The web service URL is a valid push provider, and the user said yes.\n              // permissionData.deviceToken is now available to use.\n              self.emitState('token', { apn: permissionData.deviceToken });\n          }\n      };\n\n    }\n\n\n  } else if (navigator && navigator.push && navigator.push.register && navigator.mozSetMessageHandler) {\n    // check navigator.mozPush should be enough?\n    // https://wiki.mozilla.org/WebAPI/SimplePush\n\n    var channel = 'push';\n\n    // Store the pushEndpoint\n    var pushEndpoint;\n\n    Meteor.startup(function() {\n      setupAppRegistrations();\n    });\n\n    function setupAppRegistrations() { // jshint ignore: line\n      // Issue a register() call\n      // to register to listen for a notification,\n      // you simply call push.register\n      // Here, we'll register a channel for \"email\" updates.\n      // Channels can be for anything the app would like to get notifications for.\n      var requestAccess = navigator.push.register();\n\n      requestAccess.onsuccess = function(e) {\n        // Store the endpoint\n        pushEndpoint = e.target.result;\n\n        self.emitState('token', {\n          SimplePush: {\n            channel: channel,\n            endPoint: pushEndpoint\n          }\n        });\n      };\n\n    }\n\n    // Once we've registered, the AppServer can send version pings to the EndPoint.\n    // This will trigger a 'push' message to be sent to this handler.\n    navigator.mozSetMessageHandler('push', function(message) {\n        if (message.pushEndpoint === pushEndpoint) {\n          // Did we launch or were we already running?\n          self.emit('startup', message);\n        }\n      });\n\n    // // to unregister, you simply call..\n    // AppFramework.addEventListener('user-logout', function() {\n    //   navigator.push.unregister(pushEndpoint);\n    // });\n\n    // error recovery mechanism\n    // will be called very rarely, but application\n    // should register again when it is called\n    navigator.mozSetMessageHandler('register', function(/* e */) {\n      setupAppRegistrations();\n    });\n\n\n\n  }\n\n};\n\n/*\nTODO:\n\nadd event listener api\n\n*/\n"]},"hash":"4b48533a7190b699c31a2e6eb68fb3f61d3ed134"}
