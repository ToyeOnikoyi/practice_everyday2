{"version":3,"sources":["meteor://ðŸ’»app/packages/raix:push/lib/common/main.js","meteor://ðŸ’»app/packages/raix:push/lib/common/notifications.js","meteor://ðŸ’»app/packages/raix:push/lib/server/push.api.js","meteor://ðŸ’»app/packages/raix:push/lib/server/server.js"],"names":[],"mappings":"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","file":"/packages/raix_push.js","sourcesContent":["// The push object is an event emitter\nPush = new EventState();\n\n// This is the match pattern for tokens\n_matchToken = Match.OneOf({ apn: String }, { gcm: String });\n\n\n// Client-side security warnings, used to check options\ncheckClientSecurity = function(options) {\n\n  // Warn if certificates or keys are added here on client. We dont allow the\n  // user to do this for security reasons.\n  if (options.apn && options.apn.certData) {\n    throw new Error('Push.init: Dont add your APN certificate in client code!');\n  }\n\n  if (options.apn && options.apn.keyData) {\n    throw new Error('Push.init: Dont add your APN key in client code!');\n  }\n\n  if (options.apn && options.apn.passphrase) {\n    throw new Error('Push.init: Dont add your APN passphrase in client code!');\n  }\n\n  if (options.gcm && options.gcm.apiKey) {\n    throw new Error('Push.init: Dont add your GCM api key in client code!');\n  }\n};\n\n// DEPRECATED\nPush.init = function() {\n  console.warn('Push.init have been deprecated in favor of \"config.push.json\" please migrate');\n};\n","// Notifications collection\nPush.notifications = new Mongo.Collection('_raix_push_notifications');\n\n// This is a general function to validate that the data added to notifications\n// is in the correct format. If not this function will throw errors\nvar _validateDocument = function(notification) {\n\n  // Check the general notification\n  check(notification, {\n    from: String,\n    title: String,\n    text: String,\n    badge: Match.Optional(Number),\n    sound: Match.Optional(String),\n    notId: Match.Optional(Match.Integer),\n    apn: Match.Optional({\n      from: Match.Optional(String),\n      title: Match.Optional(String),\n      text: Match.Optional(String),\n      badge: Match.Optional(Number),\n      sound: Match.Optional(String),\n      notId: Match.Optional(Match.Integer)\n    }),\n    gcm: Match.Optional({\n      from: Match.Optional(String),\n      title: Match.Optional(String),\n      text: Match.Optional(String),\n      badge: Match.Optional(Number),\n      sound: Match.Optional(String),\n      notId: Match.Optional(Match.Integer)\n    }),\n    query: Match.Optional(String),\n    token: Match.Optional(_matchToken),\n    tokens: Match.Optional([_matchToken]),\n    payload: Match.Optional(Object),\n    delayUntil: Match.Optional(Date),\n    createdAt: Date,\n    createdBy: Match.OneOf(String, null)\n  });\n\n  // Make sure a token selector or query have been set\n  if (!notification.token && !notification.tokens && !notification.query) {\n    throw new Error('No token selector or query found');\n  }\n\n  // If tokens array is set it should not be empty\n  if (notification.tokens && !notification.tokens.length) {\n    throw new Error('No tokens in array');\n  }\n};\n\nPush.send = function(options) {\n  // If on the client we set the user id - on the server we need an option\n  // set or we default to \"<SERVER>\" as the creator of the notification\n  // If current user not set see if we can set it to the logged in user\n  // this will only run on the client if Meteor.userId is available\n  var currentUser = Meteor.isClient && Meteor.userId && Meteor.userId() ||\n          Meteor.isServer && (options.createdBy || '<SERVER>') || null;\n\n  // Rig the notification object\n   var notification = _.extend({\n    createdAt: new Date(),\n    createdBy: currentUser\n  }, _.pick(options, 'from', 'title', 'text'));\n\n   // Add extra\n   _.extend(notification, _.pick(options, 'payload', 'badge', 'sound', 'notId', 'delayUntil'));\n\n  if (Match.test(options.apn, Object)) {\n    notification.apn = _.pick(options.apn, 'from', 'title', 'text', 'badge', 'sound', 'notId');\n  }\n\n  if (Match.test(options.gcm, Object)) {\n    notification.gcm = _.pick(options.gcm, 'from', 'title', 'text', 'badge', 'sound', 'notId');\n  }\n\n  // Set one token selector, this can be token, array of tokens or query\n  if (options.query) {\n    // Set query to the json string version fixing #43 and #39\n    notification.query = JSON.stringify(options.query);\n  } else if (options.token) {\n    // Set token\n    notification.token = options.token;\n  } else if (options.tokens) {\n    // Set tokens\n    notification.tokens = options.tokens;\n  }\n\n  // Validate the notification\n  _validateDocument(notification);\n\n  // Try to add the notification to send, we return an id to keep track\n  return Push.notifications.insert(notification);\n};\n\nPush.allow = function(rules) {\n  if (rules.send) {\n    Push.notifications.allow({\n      'insert': function(userId, notification) {\n        // Validate the notification\n        _validateDocument(notification);\n        // Set the user defined \"send\" rules\n        return rules.send.apply(this, [userId, notification]);\n      }\n    });\n  }\n};\n\nPush.deny = function(rules) {\n  if (rules.send) {\n    Push.notifications.deny({\n      'insert': function(userId, notification) {\n        // Validate the notification\n        _validateDocument(notification);\n        // Set the user defined \"send\" rules\n        return rules.send.apply(this, [userId, notification]);\n      }\n    });\n  }\n};\n","/*\n  A general purpose user CordovaPush\n  ios, android, mail, twitter?, facebook?, sms?, snailMail? :)\n\n  Phonegap generic :\n  https://github.com/phonegap-build/PushPlugin\n */\n\n// getText / getBinary\n\nPush.setBadge = function(/* id, count */) {\n    // throw new Error('Push.setBadge not implemented on the server');\n};\n\nvar isConfigured = false;\n\nPush.Configure = function(options) {\n    var self = this;\n    // https://npmjs.org/package/apn\n\n    // After requesting the certificate from Apple, export your private key as\n    // a .p12 file anddownload the .cer file from the iOS Provisioning Portal.\n\n    // gateway.push.apple.com, port 2195\n    // gateway.sandbox.push.apple.com, port 2195\n\n    // Now, in the directory containing cert.cer and key.p12 execute the\n    // following commands to generate your .pem files:\n    // $ openssl x509 -in cert.cer -inform DER -outform PEM -out cert.pem\n    // $ openssl pkcs12 -in key.p12 -out key.pem -nodes\n\n    // Block multiple calls\n    if (isConfigured) {\n      throw new Error('Push.Configure should not be called more than once!');\n    }\n\n    isConfigured = true;\n\n    // Add debug info\n    if (Push.debug) {\n      console.log('Push.Configure', options);\n    }\n\n    // This function is called when a token is replaced on a device - normally\n    // this should not happen, but if it does we should take action on it\n    _replaceToken = function(currentToken, newToken) {\n        // console.log('Replace token: ' + currentToken + ' -- ' + newToken);\n        // If the server gets a token event its passing in the current token and\n        // the new value - if new value is undefined this empty the token\n        self.emitState('token', currentToken, newToken);\n    };\n\n    // Rig the removeToken callback\n    _removeToken = function(token) {\n        // console.log('Remove token: ' + token);\n        // Invalidate the token\n        self.emitState('token', token, null);\n    };\n\n\n    if (options.apn) {\n        if (Push.debug) {\n          console.log('Push: APN configured');\n        }\n\n        // Allow production to be a general option for push notifications\n        if (options.production === Boolean(options.production)) {\n          options.apn.production = options.production;\n        }\n\n        // Give the user warnings about development settings\n        if (options.apn.development) {\n          // This flag is normally set by the configuration file\n          console.warn('WARNING: Push APN is using development key and certificate');\n        } else {\n          // We check the apn gateway i the options, we could risk shipping\n          // server into production while using the production configuration.\n          // On the other hand we could be in development but using the production\n          // configuration. And finally we could have configured an unknown apn\n          // gateway (this could change in the future - but a warning about typos\n          // can save hours of debugging)\n          //\n          // Warn about gateway configurations - it's more a guide\n          if (options.apn.gateway) {\n\n              if (options.apn.gateway === 'gateway.sandbox.push.apple.com') {\n                  // Using the development sandbox\n                  console.warn('WARNING: Push APN is in development mode');\n              } else if (options.apn.gateway === 'gateway.push.apple.com') {\n                  // In production - but warn if we are running on localhost\n                  if (/http:\\/\\/localhost/.test(Meteor.absoluteUrl())) {\n                      console.warn('WARNING: Push APN is configured to production mode - but server is running' +\n                        ' from localhost');\n                  }\n              } else {\n                  // Warn about gateways we dont know about\n                  console.warn('WARNING: Push APN unkown gateway \"' + options.apn.gateway + '\"');\n              }\n\n          } else {\n              if (options.apn.production) {\n                  if (/http:\\/\\/localhost/.test(Meteor.absoluteUrl())) {\n                      console.warn('WARNING: Push APN is configured to production mode - but server is running' +\n                        ' from localhost');\n                  }\n              } else {\n                  console.warn('WARNING: Push APN is in development mode');\n              }\n          }\n\n        }\n\n        // Check certificate data\n        if (!options.apn.certData || !options.apn.certData.length) {\n          console.error('ERROR: Push server could not find certData');\n        }\n\n        // Check key data\n        if (!options.apn.keyData || !options.apn.keyData.length) {\n          console.error('ERROR: Push server could not find keyData');\n        }\n\n        // Rig apn connection\n        var apn = Npm.require('apn');\n        var apnConnection = new apn.Connection( options.apn );\n\n        // Listen to transmission errors - should handle the same way as feedback.\n        apnConnection.on('transmissionError', Meteor.bindEnvironment(function (errCode, notification, recipient) {\n          if (Push.debug) {\n            console.log('Got error code %d for token %s', errCode, notification.token);\n          }\n          if ([2, 5, 8].indexOf(errCode) >= 0) {\n\n\n            // Invalid token errors...\n            _removeToken({\n              apn: notification.token\n            });\n          }\n        }));\n        // XXX: should we do a test of the connection? It would be nice to know\n        // That the server/certificates/network are correct configured\n\n        // apnConnection.connect().then(function() {\n        //     console.info('CHECK: Push APN connection OK');\n        // }, function(err) {\n        //     console.warn('CHECK: Push APN connection FAILURE');\n        // });\n        // Note: the above code spoils the connection - investigate how to\n        // shutdown/close it.\n\n        self.sendAPN = function(userToken, notification) {\n            if (Match.test(notification.apn, Object)) {\n              notification = _.extend({}, notification, notification.apn);\n            }\n\n            // console.log('sendAPN', notification.from, userToken, notification.title, notification.text,\n            // notification.badge, notification.priority);\n            var priority = (notification.priority || notification.priority === 0)? notification.priority : 10;\n\n            var myDevice = new apn.Device(userToken);\n\n            var note = new apn.Notification();\n\n            note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.\n            if (typeof notification.badge !== 'undefined') {\n              note.badge = notification.badge;\n            }\n            if (typeof notification.sound !== 'undefined') {\n              note.sound = notification.sound;\n            }\n\n            // adds category support for iOS8 custom actions as described here:\n            // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/\n            // RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW36\n            if (typeof notification.category !== 'undefined') {\n              note.category = notification.category;\n            }\n\n            note.alert = notification.text;\n            // Allow the user to set payload data\n            note.payload = (notification.payload) ? { ejson: EJSON.stringify(notification.payload) } : {};\n\n            note.payload.messageFrom = notification.from;\n            note.priority = priority;\n\n\n            // Store the token on the note so we can reference it if there was an error\n            note.token = userToken;\n\n            // console.log('I:Send message to: ' + userToken + ' count=' + count);\n\n            apnConnection.pushNotification(note, myDevice);\n\n        };\n\n\n        var initFeedback = function () {\n            var apn = Npm.require('apn');\n            // console.log('Init feedback');\n            var feedbackOptions = {\n                'batchFeedback': true,\n\n                // Time in SECONDS\n                'interval': 5,\n                production: !options.apn.development,\n                cert: options.certData,\n                key: options.keyData,\n                passphrase: options.passphrase\n            };\n\n            var feedback = new apn.Feedback(feedbackOptions);\n            feedback.on('feedback', function (devices) {\n                devices.forEach(function (item) {\n                    // Do something with item.device and item.time;\n                    // console.log('A:PUSH FEEDBACK ' + item.device + ' - ' + item.time);\n                    // The app is most likely removed from the device, we should\n                    // remove the token\n                    _removeToken({\n                        apn: item.device\n                    });\n                });\n            });\n\n            feedback.start();\n        };\n\n        // Init feedback from apn server\n        // This will help keep the appCollection up-to-date, it will help update\n        // and remove token from appCollection.\n        initFeedback();\n\n    } // EO ios notification\n\n    if (options.gcm && options.gcm.apiKey) {\n        if (Push.debug) {\n          console.log('GCM configured');\n        }\n        //self.sendGCM = function(options.from, userTokens, options.title, options.text, options.badge, options.priority) {\n        self.sendGCM = function(userTokens, notification) {\n            if (Match.test(notification.gcm, Object)) {\n              notification = _.extend({}, notification, notification.gcm);\n            }\n\n            // Make sure userTokens are an array of strings\n            if (userTokens === ''+userTokens) {\n              userTokens = [userTokens];\n            }\n\n            // Check if any tokens in there to send\n            if (!userTokens.length) {\n                if (Push.debug) {\n                  console.log('sendGCM no push tokens found');\n                }\n                return;\n            }\n\n            if (Push.debug) {\n              console.log('sendGCM', userTokens, notification);\n            }\n\n            var gcm = Npm.require('node-gcm');\n            var Fiber = Npm.require('fibers');\n\n            // Allow user to set payload\n            var data = (notification.payload) ? { ejson: EJSON.stringify(notification.payload) } : {};\n\n            data.title = notification.title;\n            data.message = notification.text;\n\n            // Set extra details\n            if (typeof notification.badge !== 'undefined') {\n              data.msgcnt = notification.badge;\n            }\n            if (typeof notification.sound !== 'undefined') {\n              data.soundname = notification.sound;\n            }\n            if (typeof notification.notId !== 'undefined') {\n              data.notId = notification.notId;\n            }\n\n            //var message = new gcm.Message();\n            var message = new gcm.Message({\n                collapseKey: notification.from,\n            //    delayWhileIdle: true,\n            //    timeToLive: 4,\n            //    restricted_package_name: 'dk.gi2.app'\n                data: data\n            });\n\n            if (Push.debug) {\n              console.log('Create GCM Sender using \"' + options.gcm.apiKey + '\"');\n            }\n            var sender = new gcm.Sender(options.gcm.apiKey);\n\n            _.each(userTokens, function(value /*, key */) {\n                if (Push.debug) {\n                  console.log('A:Send message to: ' + value);\n                }\n            });\n\n            /*message.addData('title', title);\n            message.addData('message', text);\n            message.addData('msgcnt', '1');\n            message.collapseKey = 'sitDrift';\n            message.delayWhileIdle = true;\n            message.timeToLive = 3;*/\n\n            // /**\n            //  * Parameters: message-literal, userTokens-array, No. of retries, callback-function\n            //  */\n\n            var userToken = (userTokens.length === 1)?userTokens[0]:null;\n\n            sender.send(message, userTokens, 5, function (err, result) {\n                if (err) {\n                    if (Push.debug) {\n                      console.log('ANDROID ERROR: result of sender: ' + result);\n                    }\n                } else {\n                    if (result === null) {\n                      if (Push.debug) {\n                        console.log('ANDROID: Result of sender is null');\n                      }\n                      return;\n                    }\n                    if (Push.debug) {\n                      console.log('ANDROID: Result of sender: ' + JSON.stringify(result));\n                    }\n                    if (result.canonical_ids === 1 && userToken) { // jshint ignore:line\n\n                        // This is an old device, token is replaced\n                        Fiber(function(self) {\n                            // Run in fiber\n                            try {\n                                self.callback(self.oldToken, self.newToken);\n                            } catch(err) {\n\n                            }\n\n                        }).run({\n                            oldToken: { gcm: userToken },\n                            newToken: { gcm: result.results[0].registration_id }, // jshint ignore:line\n                            callback: _replaceToken\n                        });\n                        //_replaceToken({ gcm: userToken }, { gcm: result.results[0].registration_id });\n\n                    }\n                    // We cant send to that token - might not be registred\n                    // ask the user to remove the token from the list\n                    if (result.failure !== 0 && userToken) {\n\n                        // This is an old device, token is replaced\n                        Fiber(function(self) {\n                            // Run in fiber\n                            try {\n                                self.callback(self.token);\n                            } catch(err) {\n\n                            }\n\n                        }).run({\n                            token: { gcm: userToken },\n                            callback: _removeToken\n                        });\n                        //_replaceToken({ gcm: userToken }, { gcm: result.results[0].registration_id });\n\n                    }\n\n                }\n            });\n            // /** Use the following line if you want to send the message without retries\n            // sender.sendNoRetry(message, userTokens, function (result) {\n            //     console.log('ANDROID: ' + JSON.stringify(result));\n            // });\n            // **/\n        }; // EO sendAndroid\n\n    } // EO Android\n\n    // Universal send function\n    var _querySend = function(query, options) {\n\n      var countApn = [];\n      var countGcm = [];\n\n        Push.appCollection.find(query).forEach(function(app) {\n\n          if (Push.debug) {\n            console.log('send to token', app.token);\n          }\n\n            if (app.token.apn) {\n              countApn.push(app._id);\n                // Send to APN\n                if (self.sendAPN) {\n                  self.sendAPN(app.token.apn, options);\n                }\n\n            } else if (app.token.gcm) {\n              countGcm.push(app._id);\n\n                // Send to GCM\n                // We do support multiple here - so we should construct an array\n                // and send it bulk - Investigate limit count of id's\n                if (self.sendGCM) {\n                  self.sendGCM(app.token.gcm, options);\n                }\n\n            } else {\n                throw new Error('Push.send got a faulty query');\n            }\n\n        });\n\n        if (Push.debug) {\n\n          console.log('Push: Sent message \"' + options.title + '\" to ' + countApn.length + ' ios apps ' +\n            countGcm.length + ' android apps');\n\n          // Add some verbosity about the send result, making sure the developer\n          // understands what just happened.\n          if (!countApn.length && !countGcm.length) {\n            if (Push.appCollection.find().count() === 0) {\n              console.log('Push, GUIDE: The \"Push.appCollection\" is empty -' +\n                ' No clients have registred on the server yet...');\n            }\n          } else if (!countApn.length) {\n            if (Push.appCollection.find({ 'token.apn': { $exists: true } }).count() === 0) {\n              console.log('Push, GUIDE: The \"Push.appCollection\" - No APN clients have registred on the server yet...');\n            }\n          } else if (!countGcm.length) {\n            if (Push.appCollection.find({ 'token.gcm': { $exists: true } }).count() === 0) {\n              console.log('Push, GUIDE: The \"Push.appCollection\" - No GCM clients have registred on the server yet...');\n            }\n          }\n\n        }\n\n        return {\n          apn: countApn,\n          gcm: countGcm\n        };\n    };\n\n    self.serverSend = function(options) {\n      options = options || { badge: 0 };\n      var query;\n\n      // Check basic options\n      if (options.from !== ''+options.from) {\n        throw new Error('Push.send: option \"from\" not a string');\n      }\n\n      if (options.title !== ''+options.title) {\n        throw new Error('Push.send: option \"title\" not a string');\n      }\n\n      if (options.text !== ''+options.text) {\n        throw new Error('Push.send: option \"text\" not a string');\n      }\n\n      if (options.token || options.tokens) {\n\n        // The user set one token or array of tokens\n        var tokenList = (options.token)? [options.token] : options.tokens;\n\n        if (Push.debug) {\n          console.log('Push: Send message \"' + options.title + '\" via token(s)', tokenList);\n        }\n\n        query = {\n          $or: [\n              // XXX: Test this query: can we hand in a list of push tokens?\n              { $and: [\n                  { token: { $in: tokenList } },\n                  // And is not disabled\n                  { enabled: { $ne: false }}\n                ]\n              },\n              // XXX: Test this query: does this work on app id?\n              { $and: [\n                  { _in: { $in: tokenList } }, // one of the app ids\n                  { $or: [\n                      { 'token.apn': { $exists: true }  }, // got apn token\n                      { 'token.gcm': { $exists: true }  }  // got gcm token\n                  ]},\n                  // And is not disabled\n                  { enabled: { $ne: false }}\n                ]\n              }\n          ]\n        };\n\n      } else if (options.query) {\n\n        if (Push.debug) {\n          console.log('Push: Send message \"' + options.title + '\" via query', options.query);\n        }\n\n        query = {\n          $and: [\n              options.query, // query object\n              { $or: [\n                  { 'token.apn': { $exists: true }  }, // got apn token\n                  { 'token.gcm': { $exists: true }  }  // got gcm token\n              ]},\n              // And is not disabled\n              { enabled: { $ne: false }}\n          ]\n        };\n      }\n\n\n      if (query) {\n\n        // Convert to querySend and return status\n        return _querySend(query, options);\n\n      } else {\n        throw new Error('Push.send: please set option \"token\"/\"tokens\" or \"query\"');\n      }\n\n    };\n\n\n    // This interval will allow only one notification to be sent at a time, it\n    // will check for new notifications at every `options.sendInterval`\n    // (default interval is 15000 ms)\n    //\n    // It looks in notifications collection to see if theres any pending\n    // notifications, if so it will try to reserve the pending notification.\n    // If successfully reserved the send is started.\n    //\n    // If notification.query is type string, it's assumed to be a json string\n    // version of the query selector. Making it able to carry `$` properties in\n    // the mongo collection.\n    //\n    // Pr. default notifications are removed from the collection after send have\n    // completed. Setting `options.keepNotifications` will update and keep the\n    // notification eg. if needed for historical reasons.\n    //\n    // After the send have completed a \"send\" event will be emitted with a\n    // status object containing notification id and the send result object.\n    //\n    var isSendingNotification = false;\n\n    if (options.sendInterval !== null) {\n\n      // This will require index since we sort notifications by createdAt\n      Push.notifications._ensureIndex({ createdAt: 1 });\n\n      Meteor.setInterval(function() {\n\n          if (isSendingNotification) {\n              return;\n          }\n          // Set send fence\n          isSendingNotification = true;\n\n          // var countSent = 0;\n          var batchSize = options.sendBatchSize || 1;\n\n          // Find notifications that are not being or already sent\n          var pendingNotifications = Push.notifications.find({ $and: [\n                // Message is not sent\n                { sent : { $ne: true } },\n                // And not being sent by other instances\n                { sending: { $ne: true } },\n                // And not queued for future\n                { $or: [ { delayUntil: { $exists: false } }, { delayUntil:  { $lte: new Date() } } ] }\n            ]}, {\n              // Sort by created date\n              sort: { createdAt: 1 },\n              limit: batchSize\n            });\n\n          pendingNotifications.forEach(function(notification) {\n              // Reserve notification\n              var reserved = Push.notifications.update({ $and: [\n                // Try to reserve the current notification\n                { _id: notification._id },\n                // Make sure no other instances have reserved it\n                { sending: { $ne: true } }\n              ]}, {\n                $set: {\n                  // Try to reserve\n                  sending: true\n                }\n              });\n\n              // Make sure we only handle notifications reserved by this\n              // instance\n              if (reserved) {\n\n                // Check if query is set and is type String\n                if (notification.query && notification.query === ''+notification.query) {\n                  try {\n                    // The query is in string json format - we need to parse it\n                    notification.query = JSON.parse(notification.query);\n                  } catch(err) {\n                    // Did the user tamper with this??\n                    throw new Error('Push: Error while parsing query string, Error: ' + err.message);\n                  }\n                }\n\n                // Send the notification\n                var result = Push.serverSend(notification);\n\n                if (!options.keepNotifications) {\n                    // Pr. Default we will remove notifications\n                    Push.notifications.remove({ _id: notification._id });\n                } else {\n\n                    // Update the notification\n                    Push.notifications.update({ _id: notification._id }, {\n                        $set: {\n                          // Mark as sent\n                          sent: true,\n                          // Set the sent date\n                          sentAt: new Date(),\n                          // Count\n                          count: result,\n                          // Not being sent anymore\n                          sending: false\n                        }\n                    });\n\n                }\n\n                // Emit the send\n                self.emit('send', { notification: notification._id, result: result });\n\n              } // Else could not reserve\n\n          }); // EO forEach\n\n          // Remove the send fence\n          isSendingNotification = false;\n      }, options.sendInterval || 15000); // Default every 15th sec\n\n    } else {\n      if (Push.debug) {\n        console.log('Push: Send server is disabled');\n      }\n    }\n\n};\n","Push.appCollection = new Mongo.Collection('_raix_push_app_tokens');\n\nPush.addListener('token', function(currentToken, value) {\n  if (value) {\n    // Update the token for app\n    Push.appCollection.update({ token: currentToken }, { $set: { token: value } }, { multi: true });\n  } else if (value === null) {\n    // Remove the token for app\n    Push.appCollection.update({ token: currentToken }, { $unset: { token: true } }, { multi: true });\n  }\n});\n\nMeteor.methods({\n  'raix:push-update': function(options) {\n    if (Push.debug) {\n      console.log('Push: Got push token from app:', options);\n    }\n\n    check(options, {\n      id: Match.Optional(String),\n      token: _matchToken,\n      appName: String,\n      userId: Match.OneOf(String, null),\n      metadata: Match.Optional(Object)\n    });\n\n    // The if user id is set then user id should match on client and connection\n    if (options.userId && options.userId !== this.userId) {\n      throw new Meteor.Error(403, 'Forbidden access');\n    }\n\n    var doc;\n\n    // lookup app by id if one was included\n    if (options.id) {\n      doc = Push.appCollection.findOne({ _id: options.id });\n    }\n\n    // No doc was found - we check the database to see if\n    // we can find a match for the app via token and appName\n    if (!doc) {\n      doc = Push.appCollection.findOne({\n        $and: [\n          { token: options.token },     // Match token\n          { appName: options.appName }, // Match appName\n          { token: { $exists: true } }  // Make sure token exists\n        ]\n      });\n    }\n\n    // if we could not find the id or token then create it\n    if (!doc) {\n      // Rig default doc\n      doc = {\n        token: options.token,\n        appName: options.appName,\n        userId: options.userId,\n        enabled: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      if (options.id) {\n        // XXX: We might want to check the id - Why isnt there a match for id\n        // in the Meteor check... Normal length 17 (could be larger), and\n        // numbers+letters are used in Random.id() with exception of 0 and 1\n        doc._id = options.id;\n        // The user wanted us to use a specific id, we didn't find this while\n        // searching. The client could depend on the id eg. as reference so\n        // we respect this and try to create a document with the selected id;\n        Push.appCollection._collection.insert(doc);\n      } else {\n        // Get the id from insert\n        doc._id = Push.appCollection.insert(doc);\n      }\n    } else {\n      // We found the app so update the updatedAt and set the token\n      Push.appCollection.update({ _id: doc._id }, {\n        $set: {\n          updatedAt: new Date(),\n          token: options.token\n        }\n      });\n    }\n\n    if (doc) {\n      // xxx: Hack\n      // Clean up mech making sure tokens are uniq - android sometimes generate\n      // new tokens resulting in duplicates\n      var removed = Push.appCollection.remove({\n        $and: [\n          { _id: { $ne: doc._id } },\n          { token: doc.token },     // Match token\n          { appName: doc.appName }, // Match appName\n          { token: { $exists: true } }  // Make sure token exists\n        ]\n      });\n\n      if (removed && Push.debug) {\n        console.log('Push: Removed ' + removed + ' existing app items');\n      }\n    }\n\n    if (doc && Push.debug) {\n      console.log('Push: updated', doc);\n    }\n\n    if (!doc) {\n      throw new Meteor.Error(500, 'setPushToken could not create record');\n    }\n    // Return the doc we want to use\n    return doc;\n  },\n  'raix:push-setuser': function(id) {\n    check(id, String);\n\n    if (Push.debug) {\n      console.log('Push: Settings userId \"' + this.userId + '\" for app:', id);\n    }\n    // We update the appCollection id setting the Meteor.userId\n    var found = Push.appCollection.update({ _id: id }, { $set: { userId: this.userId } });\n\n    // Note that the app id might not exist because no token is set yet.\n    // We do create the new app id for the user since we might store additional\n    // metadata for the app / user\n\n    // If id not found then create it?\n    // We dont, its better to wait until the user wants to\n    // store metadata or token - We could end up with unused data in the\n    // collection at every app re-install / update\n    //\n    // The user could store some metadata in appCollectin but only if they\n    // have created the app and provided a token.\n    // If not the metadata should be set via ground:db\n\n    return !!found;\n  },\n  'raix:push-metadata': function(data) {\n    check(data, {\n      id: String,\n      metadata: Object\n    });\n\n    // Set the metadata\n    var found = Push.appCollection.update({ _id: data.id }, { $set: { metadata: data.metadata } });\n\n    return !!found;\n  },\n  'raix:push-enable': function(data) {\n    check(data, {\n      id: String,\n      enabled: Boolean\n    });\n\n    if (Push.debug) {\n      console.log('Push: Setting enabled to \"' + data.enabled + '\" for app:', data.id);\n    }\n\n    var found = Push.appCollection.update({ _id: data.id }, { $set: { enabled: data.enabled } });\n\n    return !!found;\n  }\n});\n\n"]}