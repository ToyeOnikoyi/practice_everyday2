[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Random = Package.random.Random;\nvar EventState = Package['raix:eventstate'].EventState;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Mongo = Package.mongo.Mongo;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Push, initPushUpdates, _matchToken, checkClientSecurity, _replaceToken, _removeToken;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"raix:push\":{\"lib\":{\"client\":{\"cordova.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/raix_push/lib/client/cordova.js                                                                  //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                      //\n                                                                                                             //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                             //\n                                                                                                             //\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');                //\n                                                                                                             //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                       //\n                                                                                                             //\nvar _inherits2 = require('babel-runtime/helpers/inherits');                                                  //\n                                                                                                             //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                         //\n                                                                                                             //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }            //\n                                                                                                             //\n/* global device: false */                                                                                   //\n/* global PushNotification: false */                                                                         //\nvar getService = function getService() {                                                                     // 3\n  if (/android/i.test(device.platform)) {                                                                    // 4\n    return 'gcm';                                                                                            // 5\n  } else if (/ios/i.test(device.platform)) {                                                                 // 6\n    return 'apn';                                                                                            // 7\n  } else if (/win/i.test(device.platform)) {                                                                 // 8\n    return 'mpns';                                                                                           // 9\n  }                                                                                                          // 10\n                                                                                                             //\n  return 'unknown';                                                                                          // 12\n};                                                                                                           // 13\n                                                                                                             //\n/**                                                                                                          //\n * https://github.com/phonegap/phonegap-plugin-push#pushnotificationinitoptions                              //\n */                                                                                                          //\n                                                                                                             //\nvar PushHandle = function (_EventState) {                                                                    //\n  (0, _inherits3['default'])(PushHandle, _EventState);                                                       //\n                                                                                                             //\n  function PushHandle() {                                                                                    // 19\n    (0, _classCallCheck3['default'])(this, PushHandle);                                                      // 19\n                                                                                                             //\n    var _this = (0, _possibleConstructorReturn3['default'])(this, _EventState.call(this));                   // 19\n                                                                                                             //\n    _this.configured = false;                                                                                // 21\n    _this.debug = false;                                                                                     // 22\n    _this.token = null;                                                                                      // 23\n    return _this;                                                                                            // 19\n  }                                                                                                          // 24\n                                                                                                             //\n  PushHandle.prototype.log = function log() {                                                                //\n    if (this.debug) {                                                                                        // 26\n      var _console;                                                                                          // 26\n                                                                                                             //\n      (_console = console).log.apply(_console, arguments);                                                   // 27\n    }                                                                                                        // 28\n  };                                                                                                         // 29\n                                                                                                             //\n  PushHandle.prototype.setBadge = function setBadge(count) {                                                 //\n    var _this2 = this;                                                                                       // 30\n                                                                                                             //\n    this.once('ready', function () {                                                                         // 31\n      if (/ios/i.test(device.platform)) {                                                                    // 32\n        _this2.log('Push.setBadge:', count);                                                                 // 33\n        // xxx: at the moment only supported on iOS                                                          //\n        _this2.push.setApplicationIconBadgeNumber(function () {                                              // 35\n          _this2.log('Push.setBadge: was set to', count);                                                    // 36\n        }, function (e) {                                                                                    // 37\n          _this2.emit('error', {                                                                             // 38\n            type: getService() + '.cordova',                                                                 // 39\n            error: 'Push.setBadge Error: ' + e.message                                                       // 40\n          });                                                                                                // 38\n        }, count);                                                                                           // 42\n      }                                                                                                      // 44\n    });                                                                                                      // 45\n  };                                                                                                         // 46\n                                                                                                             //\n  PushHandle.prototype.unregister = function unregister(successHandler, errorHandler) {                      //\n    if (this.push) {                                                                                         // 48\n      this.push.unregister(successHandler, errorHandler);                                                    // 49\n    } else {                                                                                                 // 50\n      errorHandler(new Error('Push.unregister, Error: \"Push not configured\"'));                              // 51\n    }                                                                                                        // 52\n  };                                                                                                         // 53\n                                                                                                             //\n  PushHandle.prototype.Configure = function Configure() {                                                    //\n    var _this3 = this,                                                                                       // 54\n        _arguments = arguments;                                                                              // 54\n                                                                                                             //\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                   // 54\n                                                                                                             //\n                                                                                                             //\n    if (!this.configured) {                                                                                  // 56\n      this.log('Push.Configure:', options);                                                                  // 57\n                                                                                                             //\n      this.configured = true;                                                                                // 59\n                                                                                                             //\n      Meteor.startup(function () {                                                                           // 61\n                                                                                                             //\n        if (typeof PushNotification !== 'undefined') {                                                       // 63\n                                                                                                             //\n          _this3.push = PushNotification.init(options);                                                      // 65\n                                                                                                             //\n          _this3.push.on('registration', function (data) {                                                   // 67\n                                                                                                             //\n            // xxx: we need to check that the token has changed before emitting                              //\n            // a new token state - sometimes this event is triggered twice                                   //\n            if (data && data.registrationId && _this3.token !== data.registrationId) {                       // 71\n              var _token;                                                                                    // 71\n                                                                                                             //\n              _this3.token = data.registrationId;                                                            // 72\n                                                                                                             //\n              var token = (_token = {}, _token[getService()] = data.registrationId, _token);                 // 74\n              _this3.log('Push.Token:', token);                                                              // 77\n              _this3.emitState('token', token);                                                              // 78\n            }                                                                                                // 79\n                                                                                                             //\n            _this3.emitState.apply(_this3, ['registration'].concat(Array.prototype.slice.call(_arguments)));\n          });                                                                                                // 82\n                                                                                                             //\n          _this3.push.on('notification', function (data) {                                                   // 84\n            _this3.log('Push.Notification:', data);                                                          // 85\n            // xxx: check ejson support on \"additionalData\" json object                                      //\n                                                                                                             //\n            if (data.additionalData.ejson) {                                                                 // 88\n              if (data.additionalData.ejson === '' + data.additionalData.ejson) {                            // 89\n                try {                                                                                        // 90\n                  data.payload = EJSON.parse(data.additionalData.ejson);                                     // 91\n                  _this3.log('Push.Parsed.EJSON.Payload:', data.payload);                                    // 92\n                } catch (err) {                                                                              // 93\n                  _this3.log('Push.Parsed.EJSON.Payload.Error', err.message, data.payload);                  // 94\n                }                                                                                            // 95\n              } else {                                                                                       // 96\n                data.payload = EJSON.fromJSONValue(data.additionalData.ejson);                               // 97\n                _this3.log('Push.EJSON.Payload:', data.payload);                                             // 98\n              }                                                                                              // 99\n            }                                                                                                // 100\n                                                                                                             //\n            // Emit alert event - this requires the app to be in forground                                   //\n            if (data.message && data.additionalData.foreground) {                                            // 103\n              _this3.emit('alert', data);                                                                    // 104\n            }                                                                                                // 105\n                                                                                                             //\n            // Emit sound event                                                                              //\n            if (data.sound) {                                                                                // 108\n              _this3.emit('sound', data);                                                                    // 109\n            }                                                                                                // 110\n                                                                                                             //\n            // Emit badge event                                                                              //\n            if (typeof data.count !== 'undefined') {                                                         // 113\n              _this3.log('Push.SettingBadge:', data.count);                                                  // 114\n              _this3.setBadge(data.count);                                                                   // 115\n              _this3.emit('badge', data);                                                                    // 116\n            }                                                                                                // 117\n                                                                                                             //\n            if (data.additionalData.foreground) {                                                            // 119\n              _this3.log('Push.Message: Got message while app is open:', data);                              // 120\n              _this3.emit('message', data);                                                                  // 121\n            } else {                                                                                         // 122\n              _this3.log('Push.Startup: Got message while app was closed/in background:', data);             // 123\n              _this3.emitState('startup', data);                                                             // 124\n            }                                                                                                // 125\n                                                                                                             //\n            _this3.emitState();                                                                              // 127\n          });                                                                                                // 128\n                                                                                                             //\n          _this3.push.on('error', function (e) {                                                             // 130\n            _this3.log('Push.Error:', e);                                                                    // 131\n            _this3.emit('error', {                                                                           // 132\n              type: getService() + '.cordova',                                                               // 133\n              error: e.message                                                                               // 134\n            });                                                                                              // 132\n          });                                                                                                // 136\n                                                                                                             //\n          _this3.emitState('ready');                                                                         // 138\n        }                                                                                                    // 139\n      });                                                                                                    // 141\n                                                                                                             //\n      initPushUpdates(options.appName);                                                                      // 143\n    } else {                                                                                                 // 144\n      this.log('Push.Error: \"Push.Configure may only be called once\"');                                      // 145\n      throw new Error('Push.Configure may only be called once');                                             // 146\n    }                                                                                                        // 147\n  };                                                                                                         // 148\n                                                                                                             //\n  return PushHandle;                                                                                         //\n}(EventState);                                                                                               //\n                                                                                                             //\nPush = new PushHandle();                                                                                     // 151\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"client.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/raix_push/lib/client/client.js                                                                   //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n// Namespaced storage key                                                                                    //\nvar localStorageKey = '_raix:push_token';                                                                    // 2\n                                                                                                             //\n// If we are using the accounts system then add the userId to appCollection                                  //\n// and monitor for logout                                                                                    //\nvar addUserId = !!Package['accounts-base'];                                                                  // 6\n                                                                                                             //\n/*                                                                                                           //\n  1. Check if id is already set in localstorage                                                              //\n  2. If not then create an app id                                                                            //\n  3. Refresh the apn/gcm push token for this app                                                             //\n*/                                                                                                           //\n                                                                                                             //\nvar loadLocalstorage = function loadLocalstorage() {                                                         // 14\n  var data = {};                                                                                             // 15\n                                                                                                             //\n  try {                                                                                                      // 17\n    // Get the stored object from local storage                                                              //\n    data = JSON.parse(localStorage.getItem(localStorageKey));                                                // 19\n  } catch (err) {                                                                                            // 21\n    // XXX: Error using the local storage                                                                    //\n  }                                                                                                          // 23\n                                                                                                             //\n  return {                                                                                                   // 25\n    // Use a new id if not set                                                                               //\n    id: data && data.id || Random.id(),                                                                      // 27\n    // Set empty metadata object if nothing loaded                                                           //\n    metadata: data && data.metadata || {},                                                                   // 29\n    // Set default token                                                                                     //\n    token: null                                                                                              // 31\n  };                                                                                                         // 25\n};                                                                                                           // 33\n                                                                                                             //\nvar saveLocalstorage = function saveLocalstorage(data) {                                                     // 35\n  try {                                                                                                      // 36\n    // Try setting the id                                                                                    //\n    localStorage.setItem(localStorageKey, JSON.stringify(data));                                             // 38\n  } catch (err) {                                                                                            // 39\n    // XXX: storage error                                                                                    //\n  }                                                                                                          // 41\n};                                                                                                           // 42\n                                                                                                             //\n// Set stored object                                                                                         //\nvar stored = loadLocalstorage();                                                                             // 45\n// Reactive id                                                                                               //\nvar idDep = new Tracker.Dependency();                                                                        // 47\nvar stateDep = new Tracker.Dependency();                                                                     // 48\n                                                                                                             //\n// Its either set by localStorage or random                                                                  //\nidDep.changed();                                                                                             // 51\n                                                                                                             //\nvar _setEnabled = function _setEnabled(state) {                                                              // 53\n  if (stored.enabled !== state) {                                                                            // 54\n    stored.enabled = state;                                                                                  // 55\n    // Save the stored object                                                                                //\n    saveLocalstorage(stored);                                                                                // 57\n    stateDep.changed();                                                                                      // 58\n  }                                                                                                          // 59\n};                                                                                                           // 60\n                                                                                                             //\nPush.id = function () {                                                                                      // 62\n  idDep.depend();                                                                                            // 63\n  return stored.id;                                                                                          // 64\n};                                                                                                           // 65\n                                                                                                             //\nPush.enabled = function (state) {                                                                            // 67\n  if (stored) {                                                                                              // 68\n    if (typeof state === 'undefined') {                                                                      // 69\n      // Act as a getter                                                                                     //\n      stateDep.depend();                                                                                     // 71\n      return stored.enabled !== false;                                                                       // 72\n    } else {                                                                                                 // 73\n      check(state, Boolean);                                                                                 // 74\n      if (state !== stored.enabled && stored.id) {                                                           // 75\n        // Latency compensation                                                                              //\n        _setEnabled(state);                                                                                  // 77\n        // Update server                                                                                     //\n        Meteor.call('raix:push-enable', {                                                                    // 79\n          id: stored.id,                                                                                     // 80\n          enabled: state                                                                                     // 81\n        }, function (err, found) {                                                                           // 79\n          if (err || !found) {                                                                               // 83\n            // On error or missing app item, revert                                                          //\n            _setEnabled(!state);                                                                             // 85\n          }                                                                                                  // 86\n        });                                                                                                  // 87\n      }                                                                                                      // 88\n    }                                                                                                        // 89\n  }                                                                                                          // 90\n};                                                                                                           // 91\n                                                                                                             //\nPush.setUser = function () {                                                                                 // 93\n  // Let the server update the userId on the id                                                              //\n  Meteor.call('raix:push-setuser', stored.id);                                                               // 95\n};                                                                                                           // 96\n                                                                                                             //\nPush.setMetadata = function (data) {                                                                         // 98\n  stored.metadata = data;                                                                                    // 99\n  saveLocalstorage(stored);                                                                                  // 100\n  // Set the metadata on the server collection if we have a token, otherwise                                 //\n  // we should only set the metadata in localstorage                                                         //\n  if (stored.token) {                                                                                        // 103\n    // Update the metadata                                                                                   //\n    Meteor.call('raix:push-metadata', {                                                                      // 105\n      id: stored.id,                                                                                         // 106\n      metadata: stored.metadata                                                                              // 107\n    });                                                                                                      // 105\n  }                                                                                                          // 109\n};                                                                                                           // 110\n                                                                                                             //\n// Report token to the server                                                                                //\nvar reportTokenToServer = function reportTokenToServer(token, appName) {                                     // 113\n  // Store the token                                                                                         //\n  stored.token = token;                                                                                      // 115\n                                                                                                             //\n  // Set the data object                                                                                     //\n  var data = {                                                                                               // 118\n    id: stored.id,                                                                                           // 119\n    token: token,                                                                                            // 120\n    appName: appName,                                                                                        // 121\n    userId: addUserId ? Meteor.userId() : null,                                                              // 122\n    metadata: stored.metadata                                                                                // 123\n  };                                                                                                         // 118\n                                                                                                             //\n  // token.gcm or token.apn                                                                                  //\n  Meteor.call('raix:push-update', data, function (err, result) {                                             // 127\n    if (!err && result) {                                                                                    // 128\n      // The result is the id - The server may update this if it finds a                                     //\n      // match for an old install                                                                            //\n      if (stored.id !== result._id) {                                                                        // 131\n        // The server did match the push token for this device                                               //\n        stored.id = result._id;                                                                              // 133\n        // Save the stored object                                                                            //\n        saveLocalstorage(stored);                                                                            // 135\n        // The id has changed.                                                                               //\n        idDep.changed();                                                                                     // 137\n      }                                                                                                      // 138\n                                                                                                             //\n      // Make sure enabled is also updated to keep in sync                                                   //\n      if (typeof result.enabled !== 'undefined') {                                                           // 141\n        _setEnabled(result.enabled);                                                                         // 142\n      }                                                                                                      // 143\n    }                                                                                                        // 144\n  });                                                                                                        // 145\n};                                                                                                           // 146\n                                                                                                             //\ninitPushUpdates = function initPushUpdates(appName) {                                                        // 148\n  Meteor.startup(function () {                                                                               // 149\n    // Start listening for tokens                                                                            //\n    Push.on('token', function (token) {                                                                      // 151\n      if (Push.debug) {                                                                                      // 152\n        console.log('Got token:', token);                                                                    // 153\n      }                                                                                                      // 154\n      // The app should be ready, lets call in                                                               //\n      reportTokenToServer(token, appName || 'main');                                                         // 156\n    });                                                                                                      // 157\n                                                                                                             //\n    // Start listening for user updates if accounts package is added                                         //\n    if (addUserId) {                                                                                         // 160\n      Tracker.autorun(function () {                                                                          // 161\n        // Depend on the userId                                                                              //\n        Meteor.userId();                                                                                     // 163\n        // Dont run this the first time, its already done in the reportTokenToServer                         //\n        if (!this.firstRun) {                                                                                // 165\n          // Update the userId                                                                               //\n          Push.setUser();                                                                                    // 167\n        }                                                                                                    // 168\n      });                                                                                                    // 169\n    }                                                                                                        // 170\n  });                                                                                                        // 171\n};                                                                                                           // 172\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"common\":{\"notifications.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/raix_push/lib/common/notifications.js                                                            //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n// Notifications collection                                                                                  //\nPush.notifications = new Mongo.Collection('_raix_push_notifications');                                       // 2\n                                                                                                             //\n// This is a general function to validate that the data added to notifications                               //\n// is in the correct format. If not this function will throw errors                                          //\nvar _validateDocument = function _validateDocument(notification) {                                           // 6\n                                                                                                             //\n  // Check the general notification                                                                          //\n  check(notification, {                                                                                      // 9\n    from: String,                                                                                            // 10\n    title: String,                                                                                           // 11\n    text: String,                                                                                            // 12\n    badge: Match.Optional(Number),                                                                           // 13\n    sound: Match.Optional(String),                                                                           // 14\n    notId: Match.Optional(Match.Integer),                                                                    // 15\n    apn: Match.Optional({                                                                                    // 16\n      from: Match.Optional(String),                                                                          // 17\n      title: Match.Optional(String),                                                                         // 18\n      text: Match.Optional(String),                                                                          // 19\n      badge: Match.Optional(Number),                                                                         // 20\n      sound: Match.Optional(String),                                                                         // 21\n      notId: Match.Optional(Match.Integer)                                                                   // 22\n    }),                                                                                                      // 16\n    gcm: Match.Optional({                                                                                    // 24\n      from: Match.Optional(String),                                                                          // 25\n      title: Match.Optional(String),                                                                         // 26\n      text: Match.Optional(String),                                                                          // 27\n      badge: Match.Optional(Number),                                                                         // 28\n      sound: Match.Optional(String),                                                                         // 29\n      notId: Match.Optional(Match.Integer)                                                                   // 30\n    }),                                                                                                      // 24\n    query: Match.Optional(String),                                                                           // 32\n    token: Match.Optional(_matchToken),                                                                      // 33\n    tokens: Match.Optional([_matchToken]),                                                                   // 34\n    payload: Match.Optional(Object),                                                                         // 35\n    delayUntil: Match.Optional(Date),                                                                        // 36\n    createdAt: Date,                                                                                         // 37\n    createdBy: Match.OneOf(String, null)                                                                     // 38\n  });                                                                                                        // 9\n                                                                                                             //\n  // Make sure a token selector or query have been set                                                       //\n  if (!notification.token && !notification.tokens && !notification.query) {                                  // 42\n    throw new Error('No token selector or query found');                                                     // 43\n  }                                                                                                          // 44\n                                                                                                             //\n  // If tokens array is set it should not be empty                                                           //\n  if (notification.tokens && !notification.tokens.length) {                                                  // 47\n    throw new Error('No tokens in array');                                                                   // 48\n  }                                                                                                          // 49\n};                                                                                                           // 50\n                                                                                                             //\nPush.send = function (options) {                                                                             // 52\n  // If on the client we set the user id - on the server we need an option                                   //\n  // set or we default to \"<SERVER>\" as the creator of the notification                                      //\n  // If current user not set see if we can set it to the logged in user                                      //\n  // this will only run on the client if Meteor.userId is available                                          //\n  var currentUser = Meteor.isClient && Meteor.userId && Meteor.userId() || Meteor.isServer && (options.createdBy || '<SERVER>') || null;\n                                                                                                             //\n  // Rig the notification object                                                                             //\n  var notification = _.extend({                                                                              // 61\n    createdAt: new Date(),                                                                                   // 62\n    createdBy: currentUser                                                                                   // 63\n  }, _.pick(options, 'from', 'title', 'text'));                                                              // 61\n                                                                                                             //\n  // Add extra                                                                                               //\n  _.extend(notification, _.pick(options, 'payload', 'badge', 'sound', 'notId', 'delayUntil'));               // 67\n                                                                                                             //\n  if (Match.test(options.apn, Object)) {                                                                     // 69\n    notification.apn = _.pick(options.apn, 'from', 'title', 'text', 'badge', 'sound', 'notId');              // 70\n  }                                                                                                          // 71\n                                                                                                             //\n  if (Match.test(options.gcm, Object)) {                                                                     // 73\n    notification.gcm = _.pick(options.gcm, 'from', 'title', 'text', 'badge', 'sound', 'notId');              // 74\n  }                                                                                                          // 75\n                                                                                                             //\n  // Set one token selector, this can be token, array of tokens or query                                     //\n  if (options.query) {                                                                                       // 78\n    // Set query to the json string version fixing #43 and #39                                               //\n    notification.query = JSON.stringify(options.query);                                                      // 80\n  } else if (options.token) {                                                                                // 81\n    // Set token                                                                                             //\n    notification.token = options.token;                                                                      // 83\n  } else if (options.tokens) {                                                                               // 84\n    // Set tokens                                                                                            //\n    notification.tokens = options.tokens;                                                                    // 86\n  }                                                                                                          // 87\n                                                                                                             //\n  // Validate the notification                                                                               //\n  _validateDocument(notification);                                                                           // 90\n                                                                                                             //\n  // Try to add the notification to send, we return an id to keep track                                      //\n  return Push.notifications.insert(notification);                                                            // 93\n};                                                                                                           // 94\n                                                                                                             //\nPush.allow = function (rules) {                                                                              // 96\n  if (rules.send) {                                                                                          // 97\n    Push.notifications.allow({                                                                               // 98\n      'insert': function insert(userId, notification) {                                                      // 99\n        // Validate the notification                                                                         //\n        _validateDocument(notification);                                                                     // 101\n        // Set the user defined \"send\" rules                                                                 //\n        return rules.send.apply(this, [userId, notification]);                                               // 103\n      }                                                                                                      // 104\n    });                                                                                                      // 98\n  }                                                                                                          // 106\n};                                                                                                           // 107\n                                                                                                             //\nPush.deny = function (rules) {                                                                               // 109\n  if (rules.send) {                                                                                          // 110\n    Push.notifications.deny({                                                                                // 111\n      'insert': function insert(userId, notification) {                                                      // 112\n        // Validate the notification                                                                         //\n        _validateDocument(notification);                                                                     // 114\n        // Set the user defined \"send\" rules                                                                 //\n        return rules.send.apply(this, [userId, notification]);                                               // 116\n      }                                                                                                      // 117\n    });                                                                                                      // 111\n  }                                                                                                          // 119\n};                                                                                                           // 120\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/raix:push/lib/client/cordova.js\");\nrequire(\"./node_modules/meteor/raix:push/lib/common/notifications.js\");\nrequire(\"./node_modules/meteor/raix:push/lib/client/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['raix:push'] = {}, {\n  Push: Push,\n  _matchToken: _matchToken,\n  checkClientSecurity: checkClientSecurity,\n  initPushUpdates: initPushUpdates,\n  _replaceToken: _replaceToken,\n  _removeToken: _removeToken\n});\n\n})();\n","servePath":"/packages/raix_push.js","sourceMap":{"version":3,"sources":["/packages/raix:push/lib/client/cordova.js","/packages/raix:push/lib/client/client.js","/packages/raix:push/lib/common/notifications.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAI,aAAa,SAAb,UAAa,GAAW;AAC1B,MAAI,WAAW,IAAX,CAAgB,OAAO,QAAvB,CAAJ,EAAsC;AACpC,WAAO,KAAP;AACD,GAFD,MAEO,IAAI,OAAO,IAAP,CAAY,OAAO,QAAnB,CAAJ,EAAkC;AACvC,WAAO,KAAP;AACD,GAFM,MAEA,IAAI,OAAO,IAAP,CAAY,OAAO,QAAnB,CAAJ,EAAkC;AACvC,WAAO,MAAP;AACD;;AAED,SAAO,SAAP;AACD,CAVD;;;;;;IAeM,U;;;AACJ,wBAAc;AAAA;;AAAA,kEACZ,sBADY;;AAEZ,UAAK,UAAL,GAAkB,KAAlB;AACA,UAAK,KAAL,GAAa,KAAb;AACA,UAAK,KAAL,GAAa,IAAb;AAJY;AAKb;;uBACD,G,kBAAM;AACJ,QAAI,KAAK,KAAT,EAAgB;AAAA;;AACd,2BAAQ,GAAR,iBAAe,SAAf;AACD;AACF,G;;uBACD,Q,qBAAS,K,EAAO;AAAA;;AACd,SAAK,IAAL,CAAU,OAAV,EAAmB,YAAM;AACvB,UAAI,OAAO,IAAP,CAAY,OAAO,QAAnB,CAAJ,EAAkC;AAChC,eAAK,GAAL,CAAS,gBAAT,EAA2B,KAA3B;;AAEA,eAAK,IAAL,CAAU,6BAAV,CAAwC,YAAM;AAC5C,iBAAK,GAAL,CAAS,2BAAT,EAAsC,KAAtC;AACD,SAFD,EAEG,UAAC,CAAD,EAAO;AACR,iBAAK,IAAL,CAAU,OAAV,EAAmB;AACjB,kBAAM,eAAe,UADJ;AAEjB,mBAAO,0BAA0B,EAAE;AAFlB,WAAnB;AAID,SAPD,EAOG,KAPH;AASD;AACF,KAdD;AAeD,G;;uBACD,U,uBAAW,c,EAAgB,Y,EAAc;AACvC,QAAI,KAAK,IAAT,EAAe;AACb,WAAK,IAAL,CAAU,UAAV,CAAqB,cAArB,EAAqC,YAArC;AACD,KAFD,MAEO;AACL,mBAAa,IAAI,KAAJ,CAAU,+CAAV,CAAb;AACD;AACF,G;;uBACD,S,wBAAwB;AAAA;AAAA;;AAAA,QAAd,OAAc,yDAAJ,EAAI;;;AAEtB,QAAI,CAAC,KAAK,UAAV,EAAsB;AACpB,WAAK,GAAL,CAAS,iBAAT,EAA4B,OAA5B;;AAEA,WAAK,UAAL,GAAkB,IAAlB;;AAEA,aAAO,OAAP,CAAe,YAAM;;AAEnB,YAAI,OAAO,gBAAP,KAA4B,WAAhC,EAA6C;;AAE3C,iBAAK,IAAL,GAAY,iBAAiB,IAAjB,CAAsB,OAAtB,CAAZ;;AAEA,iBAAK,IAAL,CAAU,EAAV,CAAa,cAAb,EAA6B,UAAC,IAAD,EAAU;;;;AAIrC,gBAAI,QAAQ,KAAK,cAAb,IAA+B,OAAK,KAAL,KAAe,KAAK,cAAvD,EAAuE;AAAA;;AACrE,qBAAK,KAAL,GAAa,KAAK,cAAlB;;AAEA,kBAAI,6BACD,YADC,IACc,KAAK,cADnB,SAAJ;AAGA,qBAAK,GAAL,CAAS,aAAT,EAAwB,KAAxB;AACA,qBAAK,SAAL,CAAe,OAAf,EAAwB,KAAxB;AACD;;AAED,mBAAK,SAAL,gBAAe,cAAf;AACD,WAfD;;AAiBA,iBAAK,IAAL,CAAU,EAAV,CAAa,cAAb,EAA6B,UAAC,IAAD,EAAU;AACrC,mBAAK,GAAL,CAAS,oBAAT,EAA+B,IAA/B;;;AAGA,gBAAI,KAAK,cAAL,CAAoB,KAAxB,EAA+B;AAC7B,kBAAI,KAAK,cAAL,CAAoB,KAApB,KAA8B,KAAG,KAAK,cAAL,CAAoB,KAAzD,EAAgE;AAC9D,oBAAI;AACF,uBAAK,OAAL,GAAe,MAAM,KAAN,CAAY,KAAK,cAAL,CAAoB,KAAhC,CAAf;AACA,yBAAK,GAAL,CAAS,4BAAT,EAAuC,KAAK,OAA5C;AACD,iBAHD,CAGE,OAAM,GAAN,EAAW;AACX,yBAAK,GAAL,CAAS,iCAAT,EAA4C,IAAI,OAAhD,EAAyD,KAAK,OAA9D;AACD;AACF,eAPD,MAOO;AACL,qBAAK,OAAL,GAAe,MAAM,aAAN,CAAoB,KAAK,cAAL,CAAoB,KAAxC,CAAf;AACA,uBAAK,GAAL,CAAS,qBAAT,EAAgC,KAAK,OAArC;AACD;AACF;;;AAGD,gBAAI,KAAK,OAAL,IAAgB,KAAK,cAAL,CAAoB,UAAxC,EAAoD;AAClD,qBAAK,IAAL,CAAU,OAAV,EAAmB,IAAnB;AACD;;;AAGD,gBAAI,KAAK,KAAT,EAAgB;AACd,qBAAK,IAAL,CAAU,OAAV,EAAmB,IAAnB;AACD;;;AAGD,gBAAI,OAAO,KAAK,KAAZ,KAAsB,WAA1B,EAAuC;AACrC,qBAAK,GAAL,CAAS,oBAAT,EAA+B,KAAK,KAApC;AACA,qBAAK,QAAL,CAAc,KAAK,KAAnB;AACA,qBAAK,IAAL,CAAU,OAAV,EAAmB,IAAnB;AACD;;AAED,gBAAI,KAAK,cAAL,CAAoB,UAAxB,EAAoC;AAClC,qBAAK,GAAL,CAAS,8CAAT,EAAyD,IAAzD;AACA,qBAAK,IAAL,CAAU,SAAV,EAAqB,IAArB;AACD,aAHD,MAGO;AACL,qBAAK,GAAL,CAAS,+DAAT,EAA0E,IAA1E;AACA,qBAAK,SAAL,CAAe,SAAf,EAA0B,IAA1B;AACD;;AAED,mBAAK,SAAL;AACD,WA5CD;;AA8CA,iBAAK,IAAL,CAAU,EAAV,CAAa,OAAb,EAAsB,UAAC,CAAD,EAAO;AAC3B,mBAAK,GAAL,CAAS,aAAT,EAAwB,CAAxB;AACA,mBAAK,IAAL,CAAU,OAAV,EAAmB;AACjB,oBAAM,eAAe,UADJ;AAEjB,qBAAO,EAAE;AAFQ,aAAnB;AAID,WAND;;AAQA,iBAAK,SAAL,CAAe,OAAf;AACD;AAEF,OAhFD;;AAkFA,sBAAgB,QAAQ,OAAxB;AACD,KAxFD,MAwFO;AACL,WAAK,GAAL,CAAS,sDAAT;AACA,YAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACD;AACF,G;;;EAlIsB,U;;AAqIzB,OAAO,IAAI,UAAJ,EAAP,4F;;;;;;;;;;;;ACrJA,IAAI,kBAAkB,kBAAtB;;;;AAIA,IAAI,YAAY,CAAC,CAAC,QAAQ,eAAR,CAAlB;;;;;;;;AAQA,IAAI,mBAAmB,SAAnB,gBAAmB,GAAW;AAChC,MAAI,OAAO,EAAX;;AAEA,MAAI;;AAEF,WAAO,KAAK,KAAL,CAAW,aAAa,OAAb,CAAqB,eAArB,CAAX,CAAP;AAED,GAJD,CAIE,OAAM,GAAN,EAAW;;AAEZ;;AAED,SAAO;;AAEL,QAAI,QAAQ,KAAK,EAAb,IAAmB,OAAO,EAAP,EAFlB;;AAIL,cAAU,QAAQ,KAAK,QAAb,IAAyB,EAJ9B;;AAML,WAAO;AANF,GAAP;AAQD,CAnBD;;AAqBA,IAAI,mBAAmB,SAAnB,gBAAmB,CAAS,IAAT,EAAe;AACpC,MAAI;;AAEF,iBAAa,OAAb,CAAqB,eAArB,EAAsC,KAAK,SAAL,CAAe,IAAf,CAAtC;AACD,GAHD,CAGE,OAAM,GAAN,EAAW;;AAEZ;AACF,CAPD;;;AAUA,IAAI,SAAS,kBAAb;;AAEA,IAAI,QAAQ,IAAI,QAAQ,UAAZ,EAAZ;AACA,IAAI,WAAW,IAAI,QAAQ,UAAZ,EAAf;;;AAGA,MAAM,OAAN;;AAEA,IAAI,cAAc,SAAd,WAAc,CAAS,KAAT,EAAgB;AAChC,MAAI,OAAO,OAAP,KAAmB,KAAvB,EAA8B;AAC5B,WAAO,OAAP,GAAiB,KAAjB;;AAEA,qBAAiB,MAAjB;AACA,aAAS,OAAT;AACD;AACF,CAPD;;AASA,KAAK,EAAL,GAAU,YAAW;AACnB,QAAM,MAAN;AACA,SAAO,OAAO,EAAd;AACD,CAHD;;AAKA,KAAK,OAAL,GAAe,UAAS,KAAT,EAAgB;AAC7B,MAAI,MAAJ,EAAY;AACV,QAAI,OAAO,KAAP,KAAiB,WAArB,EAAkC;;AAEhC,eAAS,MAAT;AACA,aAAO,OAAO,OAAP,KAAmB,KAA1B;AACD,KAJD,MAIO;AACL,YAAM,KAAN,EAAa,OAAb;AACA,UAAI,UAAU,OAAO,OAAjB,IAA4B,OAAO,EAAvC,EAA2C;;AAEzC,oBAAY,KAAZ;;AAEA,eAAO,IAAP,CAAY,kBAAZ,EAAgC;AAC9B,cAAI,OAAO,EADmB;AAE9B,mBAAS;AAFqB,SAAhC,EAGG,UAAS,GAAT,EAAc,KAAd,EAAqB;AACtB,cAAI,OAAO,CAAC,KAAZ,EAAmB;;AAEjB,wBAAY,CAAC,KAAb;AACD;AACF,SARD;AASD;AACF;AACF;AACF,CAxBD;;AA0BA,KAAK,OAAL,GAAe,YAAW;;AAExB,SAAO,IAAP,CAAY,mBAAZ,EAAiC,OAAO,EAAxC;AACD,CAHD;;AAKA,KAAK,WAAL,GAAmB,UAAS,IAAT,EAAe;AAChC,SAAO,QAAP,GAAkB,IAAlB;AACA,mBAAiB,MAAjB;;;AAGA,MAAI,OAAO,KAAX,EAAkB;;AAEhB,WAAO,IAAP,CAAY,oBAAZ,EAAkC;AAChC,UAAI,OAAO,EADqB;AAEhC,gBAAU,OAAO;AAFe,KAAlC;AAID;AACF,CAZD;;;AAeA,IAAI,sBAAsB,SAAtB,mBAAsB,CAAS,KAAT,EAAgB,OAAhB,EAAyB;;AAEjD,SAAO,KAAP,GAAe,KAAf;;;AAGA,MAAI,OAAO;AACT,QAAI,OAAO,EADF;AAET,WAAO,KAFE;AAGT,aAAS,OAHA;AAIT,YAAS,SAAD,GAAc,OAAO,MAAP,EAAd,GAAgC,IAJ/B;AAKT,cAAU,OAAO;AALR,GAAX;;;AASA,SAAO,IAAP,CAAY,kBAAZ,EAAgC,IAAhC,EAAsC,UAAS,GAAT,EAAc,MAAd,EAAsB;AAC1D,QAAI,CAAC,GAAD,IAAQ,MAAZ,EAAoB;;;AAGlB,UAAI,OAAO,EAAP,KAAc,OAAO,GAAzB,EAA8B;;AAE5B,eAAO,EAAP,GAAY,OAAO,GAAnB;;AAEA,yBAAiB,MAAjB;;AAEA,cAAM,OAAN;AACD;;;AAGD,UAAI,OAAO,OAAO,OAAd,KAA0B,WAA9B,EAA2C;AACzC,oBAAY,OAAO,OAAnB;AACD;AACF;AACF,GAlBD;AAmBD,CAjCD;;AAmCA,kBAAkB,yBAAS,OAAT,EAAkB;AAClC,SAAO,OAAP,CAAe,YAAW;;AAExB,SAAK,EAAL,CAAQ,OAAR,EAAiB,UAAS,KAAT,EAAgB;AAC/B,UAAI,KAAK,KAAT,EAAgB;AACd,gBAAQ,GAAR,CAAY,YAAZ,EAA0B,KAA1B;AACD;;AAED,0BAAoB,KAApB,EAA2B,WAAW,MAAtC;AACD,KAND;;;AASA,QAAI,SAAJ,EAAe;AACb,cAAQ,OAAR,CAAgB,YAAW;;AAEzB,eAAO,MAAP;;AAEA,YAAI,CAAC,KAAK,QAAV,EAAoB;;AAElB,eAAK,OAAL;AACD;AACF,OARD;AASD;AACF,GAtBD;AAuBD,CAxBD,kH;;;;;;;;;;;;AClJA,KAAK,aAAL,GAAqB,IAAI,MAAM,UAAV,CAAqB,0BAArB,CAArB;;;;AAIA,IAAI,oBAAoB,SAApB,iBAAoB,CAAS,YAAT,EAAuB;;;AAG7C,QAAM,YAAN,EAAoB;AAClB,UAAM,MADY;AAElB,WAAO,MAFW;AAGlB,UAAM,MAHY;AAIlB,WAAO,MAAM,QAAN,CAAe,MAAf,CAJW;AAKlB,WAAO,MAAM,QAAN,CAAe,MAAf,CALW;AAMlB,WAAO,MAAM,QAAN,CAAe,MAAM,OAArB,CANW;AAOlB,SAAK,MAAM,QAAN,CAAe;AAClB,YAAM,MAAM,QAAN,CAAe,MAAf,CADY;AAElB,aAAO,MAAM,QAAN,CAAe,MAAf,CAFW;AAGlB,YAAM,MAAM,QAAN,CAAe,MAAf,CAHY;AAIlB,aAAO,MAAM,QAAN,CAAe,MAAf,CAJW;AAKlB,aAAO,MAAM,QAAN,CAAe,MAAf,CALW;AAMlB,aAAO,MAAM,QAAN,CAAe,MAAM,OAArB;AANW,KAAf,CAPa;AAelB,SAAK,MAAM,QAAN,CAAe;AAClB,YAAM,MAAM,QAAN,CAAe,MAAf,CADY;AAElB,aAAO,MAAM,QAAN,CAAe,MAAf,CAFW;AAGlB,YAAM,MAAM,QAAN,CAAe,MAAf,CAHY;AAIlB,aAAO,MAAM,QAAN,CAAe,MAAf,CAJW;AAKlB,aAAO,MAAM,QAAN,CAAe,MAAf,CALW;AAMlB,aAAO,MAAM,QAAN,CAAe,MAAM,OAArB;AANW,KAAf,CAfa;AAuBlB,WAAO,MAAM,QAAN,CAAe,MAAf,CAvBW;AAwBlB,WAAO,MAAM,QAAN,CAAe,WAAf,CAxBW;AAyBlB,YAAQ,MAAM,QAAN,CAAe,CAAC,WAAD,CAAf,CAzBU;AA0BlB,aAAS,MAAM,QAAN,CAAe,MAAf,CA1BS;AA2BlB,gBAAY,MAAM,QAAN,CAAe,IAAf,CA3BM;AA4BlB,eAAW,IA5BO;AA6BlB,eAAW,MAAM,KAAN,CAAY,MAAZ,EAAoB,IAApB;AA7BO,GAApB;;;AAiCA,MAAI,CAAC,aAAa,KAAd,IAAuB,CAAC,aAAa,MAArC,IAA+C,CAAC,aAAa,KAAjE,EAAwE;AACtE,UAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACD;;;AAGD,MAAI,aAAa,MAAb,IAAuB,CAAC,aAAa,MAAb,CAAoB,MAAhD,EAAwD;AACtD,UAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACD;AACF,CA5CD;;AA8CA,KAAK,IAAL,GAAY,UAAS,OAAT,EAAkB;;;;;AAK5B,MAAI,cAAc,OAAO,QAAP,IAAmB,OAAO,MAA1B,IAAoC,OAAO,MAAP,EAApC,IACV,OAAO,QAAP,KAAoB,QAAQ,SAAR,IAAqB,UAAzC,CADU,IAC8C,IADhE;;;AAIC,MAAI,eAAe,EAAE,MAAF,CAAS;AAC3B,eAAW,IAAI,IAAJ,EADgB;AAE3B,eAAW;AAFgB,GAAT,EAGjB,EAAE,IAAF,CAAO,OAAP,EAAgB,MAAhB,EAAwB,OAAxB,EAAiC,MAAjC,CAHiB,CAAnB;;;AAMA,IAAE,MAAF,CAAS,YAAT,EAAuB,EAAE,IAAF,CAAO,OAAP,EAAgB,SAAhB,EAA2B,OAA3B,EAAoC,OAApC,EAA6C,OAA7C,EAAsD,YAAtD,CAAvB;;AAED,MAAI,MAAM,IAAN,CAAW,QAAQ,GAAnB,EAAwB,MAAxB,CAAJ,EAAqC;AACnC,iBAAa,GAAb,GAAmB,EAAE,IAAF,CAAO,QAAQ,GAAf,EAAoB,MAApB,EAA4B,OAA5B,EAAqC,MAArC,EAA6C,OAA7C,EAAsD,OAAtD,EAA+D,OAA/D,CAAnB;AACD;;AAED,MAAI,MAAM,IAAN,CAAW,QAAQ,GAAnB,EAAwB,MAAxB,CAAJ,EAAqC;AACnC,iBAAa,GAAb,GAAmB,EAAE,IAAF,CAAO,QAAQ,GAAf,EAAoB,MAApB,EAA4B,OAA5B,EAAqC,MAArC,EAA6C,OAA7C,EAAsD,OAAtD,EAA+D,OAA/D,CAAnB;AACD;;;AAGD,MAAI,QAAQ,KAAZ,EAAmB;;AAEjB,iBAAa,KAAb,GAAqB,KAAK,SAAL,CAAe,QAAQ,KAAvB,CAArB;AACD,GAHD,MAGO,IAAI,QAAQ,KAAZ,EAAmB;;AAExB,iBAAa,KAAb,GAAqB,QAAQ,KAA7B;AACD,GAHM,MAGA,IAAI,QAAQ,MAAZ,EAAoB;;AAEzB,iBAAa,MAAb,GAAsB,QAAQ,MAA9B;AACD;;;AAGD,oBAAkB,YAAlB;;;AAGA,SAAO,KAAK,aAAL,CAAmB,MAAnB,CAA0B,YAA1B,CAAP;AACD,CA1CD;;AA4CA,KAAK,KAAL,GAAa,UAAS,KAAT,EAAgB;AAC3B,MAAI,MAAM,IAAV,EAAgB;AACd,SAAK,aAAL,CAAmB,KAAnB,CAAyB;AACvB,gBAAU,gBAAS,MAAT,EAAiB,YAAjB,EAA+B;;AAEvC,0BAAkB,YAAlB;;AAEA,eAAO,MAAM,IAAN,CAAW,KAAX,CAAiB,IAAjB,EAAuB,CAAC,MAAD,EAAS,YAAT,CAAvB,CAAP;AACD;AANsB,KAAzB;AAQD;AACF,CAXD;;AAaA,KAAK,IAAL,GAAY,UAAS,KAAT,EAAgB;AAC1B,MAAI,MAAM,IAAV,EAAgB;AACd,SAAK,aAAL,CAAmB,IAAnB,CAAwB;AACtB,gBAAU,gBAAS,MAAT,EAAiB,YAAjB,EAA+B;;AAEvC,0BAAkB,YAAlB;;AAEA,eAAO,MAAM,IAAN,CAAW,KAAX,CAAiB,IAAjB,EAAuB,CAAC,MAAD,EAAS,YAAT,CAAvB,CAAP;AACD;AANqB,KAAxB;AAQD;AACF,CAXD,kH","file":"/packages/raix_push.js","sourcesContent":["/* global device: false */\n/* global PushNotification: false */\nvar getService = function() {\n  if (/android/i.test(device.platform)) {\n    return 'gcm';\n  } else if (/ios/i.test(device.platform)) {\n    return 'apn';\n  } else if (/win/i.test(device.platform)) {\n    return 'mpns';\n  }\n\n  return 'unknown';\n};\n\n/**\n * https://github.com/phonegap/phonegap-plugin-push#pushnotificationinitoptions\n */\nclass PushHandle extends EventState {\n  constructor() {\n    super();\n    this.configured = false;\n    this.debug = false;\n    this.token = null;\n  }\n  log() {\n    if (this.debug) {\n      console.log(...arguments);\n    }\n  }\n  setBadge(count) {\n    this.once('ready', () => {\n      if (/ios/i.test(device.platform)) {\n        this.log('Push.setBadge:', count);\n        // xxx: at the moment only supported on iOS\n        this.push.setApplicationIconBadgeNumber(() => {\n          this.log('Push.setBadge: was set to', count);\n        }, (e) => {\n          this.emit('error', {\n            type: getService() + '.cordova',\n            error: 'Push.setBadge Error: ' + e.message\n          });\n        }, count);\n\n      }\n    });\n  }\n  unregister(successHandler, errorHandler) {\n    if (this.push) {\n      this.push.unregister(successHandler, errorHandler);\n    } else {\n      errorHandler(new Error('Push.unregister, Error: \"Push not configured\"'));\n    }\n  }\n  Configure(options = {}) {\n\n    if (!this.configured) {\n      this.log('Push.Configure:', options);\n\n      this.configured = true;\n\n      Meteor.startup(() => {\n\n        if (typeof PushNotification !== 'undefined') {\n\n          this.push = PushNotification.init(options);\n\n          this.push.on('registration', (data) => {\n\n            // xxx: we need to check that the token has changed before emitting\n            // a new token state - sometimes this event is triggered twice\n            if (data && data.registrationId && this.token !== data.registrationId) {\n              this.token = data.registrationId;\n\n              var token = {\n                [getService()]: data.registrationId\n              };\n              this.log('Push.Token:', token);\n              this.emitState('token', token);\n            }\n\n            this.emitState('registration', ...arguments);\n          });\n\n          this.push.on('notification', (data) => {\n            this.log('Push.Notification:', data);\n            // xxx: check ejson support on \"additionalData\" json object\n\n            if (data.additionalData.ejson) {\n              if (data.additionalData.ejson === ''+data.additionalData.ejson) {\n                try {\n                  data.payload = EJSON.parse(data.additionalData.ejson);\n                  this.log('Push.Parsed.EJSON.Payload:', data.payload);\n                } catch(err) {\n                  this.log('Push.Parsed.EJSON.Payload.Error', err.message, data.payload);\n                }\n              } else {\n                data.payload = EJSON.fromJSONValue(data.additionalData.ejson);\n                this.log('Push.EJSON.Payload:', data.payload);\n              }\n            }\n\n            // Emit alert event - this requires the app to be in forground\n            if (data.message && data.additionalData.foreground) {\n              this.emit('alert', data);\n            }\n\n            // Emit sound event\n            if (data.sound) {\n              this.emit('sound', data);\n            }\n\n            // Emit badge event\n            if (typeof data.count !== 'undefined') {\n              this.log('Push.SettingBadge:', data.count);\n              this.setBadge(data.count);\n              this.emit('badge', data);\n            }\n\n            if (data.additionalData.foreground) {\n              this.log('Push.Message: Got message while app is open:', data);\n              this.emit('message', data);\n            } else {\n              this.log('Push.Startup: Got message while app was closed/in background:', data);\n              this.emitState('startup', data);\n            }\n\n            this.emitState();\n          });\n\n          this.push.on('error', (e) => {\n            this.log('Push.Error:', e);\n            this.emit('error', {\n              type: getService() + '.cordova',\n              error: e.message\n            });\n          });\n\n          this.emitState('ready');\n        }\n\n      });\n\n      initPushUpdates(options.appName);\n    } else {\n      this.log('Push.Error: \"Push.Configure may only be called once\"');\n      throw new Error('Push.Configure may only be called once');\n    }\n  }\n}\n\nPush = new PushHandle();\n","// Namespaced storage key\nvar localStorageKey = '_raix:push_token';\n\n// If we are using the accounts system then add the userId to appCollection\n// and monitor for logout\nvar addUserId = !!Package['accounts-base'];\n\n/*\n  1. Check if id is already set in localstorage\n  2. If not then create an app id\n  3. Refresh the apn/gcm push token for this app\n*/\n\nvar loadLocalstorage = function() {\n  var data = {};\n\n  try {\n    // Get the stored object from local storage\n    data = JSON.parse(localStorage.getItem(localStorageKey));\n\n  } catch(err) {\n    // XXX: Error using the local storage\n  }\n\n  return {\n    // Use a new id if not set\n    id: data && data.id || Random.id(),\n    // Set empty metadata object if nothing loaded\n    metadata: data && data.metadata || {},\n    // Set default token\n    token: null\n  };\n};\n\nvar saveLocalstorage = function(data) {\n  try {\n    // Try setting the id\n    localStorage.setItem(localStorageKey, JSON.stringify(data));\n  } catch(err) {\n    // XXX: storage error\n  }\n};\n\n// Set stored object\nvar stored = loadLocalstorage();\n// Reactive id\nvar idDep = new Tracker.Dependency();\nvar stateDep = new Tracker.Dependency();\n\n// Its either set by localStorage or random\nidDep.changed();\n\nvar _setEnabled = function(state) {\n  if (stored.enabled !== state) {\n    stored.enabled = state;\n    // Save the stored object\n    saveLocalstorage(stored);\n    stateDep.changed();\n  }\n};\n\nPush.id = function() {\n  idDep.depend();\n  return stored.id;\n};\n\nPush.enabled = function(state) {\n  if (stored) {\n    if (typeof state === 'undefined') {\n      // Act as a getter\n      stateDep.depend();\n      return stored.enabled !== false;\n    } else {\n      check(state, Boolean);\n      if (state !== stored.enabled && stored.id) {\n        // Latency compensation\n        _setEnabled(state);\n        // Update server\n        Meteor.call('raix:push-enable', {\n          id: stored.id,\n          enabled: state\n        }, function(err, found) {\n          if (err || !found) {\n            // On error or missing app item, revert\n            _setEnabled(!state);\n          }\n        });\n      }\n    }\n  }\n};\n\nPush.setUser = function() {\n  // Let the server update the userId on the id\n  Meteor.call('raix:push-setuser', stored.id);\n};\n\nPush.setMetadata = function(data) {\n  stored.metadata = data;\n  saveLocalstorage(stored);\n  // Set the metadata on the server collection if we have a token, otherwise\n  // we should only set the metadata in localstorage\n  if (stored.token) {\n    // Update the metadata\n    Meteor.call('raix:push-metadata', {\n      id: stored.id,\n      metadata: stored.metadata\n    });\n  }\n};\n\n// Report token to the server\nvar reportTokenToServer = function(token, appName) {\n  // Store the token\n  stored.token = token;\n\n  // Set the data object\n  var data = {\n    id: stored.id,\n    token: token,\n    appName: appName,\n    userId: (addUserId) ? Meteor.userId() : null,\n    metadata: stored.metadata\n  };\n\n  // token.gcm or token.apn\n  Meteor.call('raix:push-update', data, function(err, result) {\n    if (!err && result) {\n      // The result is the id - The server may update this if it finds a\n      // match for an old install\n      if (stored.id !== result._id) {\n        // The server did match the push token for this device\n        stored.id = result._id;\n        // Save the stored object\n        saveLocalstorage(stored);\n        // The id has changed.\n        idDep.changed();\n      }\n\n      // Make sure enabled is also updated to keep in sync\n      if (typeof result.enabled !== 'undefined') {\n        _setEnabled(result.enabled);\n      }\n    }\n  });\n};\n\ninitPushUpdates = function(appName) {\n  Meteor.startup(function() {\n    // Start listening for tokens\n    Push.on('token', function(token) {\n      if (Push.debug) {\n        console.log('Got token:', token);\n      }\n      // The app should be ready, lets call in\n      reportTokenToServer(token, appName || 'main');\n    });\n\n    // Start listening for user updates if accounts package is added\n    if (addUserId) {\n      Tracker.autorun(function() {\n        // Depend on the userId\n        Meteor.userId();\n        // Dont run this the first time, its already done in the reportTokenToServer\n        if (!this.firstRun) {\n          // Update the userId\n          Push.setUser();\n        }\n      });\n    }\n  });\n};\n","// Notifications collection\nPush.notifications = new Mongo.Collection('_raix_push_notifications');\n\n// This is a general function to validate that the data added to notifications\n// is in the correct format. If not this function will throw errors\nvar _validateDocument = function(notification) {\n\n  // Check the general notification\n  check(notification, {\n    from: String,\n    title: String,\n    text: String,\n    badge: Match.Optional(Number),\n    sound: Match.Optional(String),\n    notId: Match.Optional(Match.Integer),\n    apn: Match.Optional({\n      from: Match.Optional(String),\n      title: Match.Optional(String),\n      text: Match.Optional(String),\n      badge: Match.Optional(Number),\n      sound: Match.Optional(String),\n      notId: Match.Optional(Match.Integer)\n    }),\n    gcm: Match.Optional({\n      from: Match.Optional(String),\n      title: Match.Optional(String),\n      text: Match.Optional(String),\n      badge: Match.Optional(Number),\n      sound: Match.Optional(String),\n      notId: Match.Optional(Match.Integer)\n    }),\n    query: Match.Optional(String),\n    token: Match.Optional(_matchToken),\n    tokens: Match.Optional([_matchToken]),\n    payload: Match.Optional(Object),\n    delayUntil: Match.Optional(Date),\n    createdAt: Date,\n    createdBy: Match.OneOf(String, null)\n  });\n\n  // Make sure a token selector or query have been set\n  if (!notification.token && !notification.tokens && !notification.query) {\n    throw new Error('No token selector or query found');\n  }\n\n  // If tokens array is set it should not be empty\n  if (notification.tokens && !notification.tokens.length) {\n    throw new Error('No tokens in array');\n  }\n};\n\nPush.send = function(options) {\n  // If on the client we set the user id - on the server we need an option\n  // set or we default to \"<SERVER>\" as the creator of the notification\n  // If current user not set see if we can set it to the logged in user\n  // this will only run on the client if Meteor.userId is available\n  var currentUser = Meteor.isClient && Meteor.userId && Meteor.userId() ||\n          Meteor.isServer && (options.createdBy || '<SERVER>') || null;\n\n  // Rig the notification object\n   var notification = _.extend({\n    createdAt: new Date(),\n    createdBy: currentUser\n  }, _.pick(options, 'from', 'title', 'text'));\n\n   // Add extra\n   _.extend(notification, _.pick(options, 'payload', 'badge', 'sound', 'notId', 'delayUntil'));\n\n  if (Match.test(options.apn, Object)) {\n    notification.apn = _.pick(options.apn, 'from', 'title', 'text', 'badge', 'sound', 'notId');\n  }\n\n  if (Match.test(options.gcm, Object)) {\n    notification.gcm = _.pick(options.gcm, 'from', 'title', 'text', 'badge', 'sound', 'notId');\n  }\n\n  // Set one token selector, this can be token, array of tokens or query\n  if (options.query) {\n    // Set query to the json string version fixing #43 and #39\n    notification.query = JSON.stringify(options.query);\n  } else if (options.token) {\n    // Set token\n    notification.token = options.token;\n  } else if (options.tokens) {\n    // Set tokens\n    notification.tokens = options.tokens;\n  }\n\n  // Validate the notification\n  _validateDocument(notification);\n\n  // Try to add the notification to send, we return an id to keep track\n  return Push.notifications.insert(notification);\n};\n\nPush.allow = function(rules) {\n  if (rules.send) {\n    Push.notifications.allow({\n      'insert': function(userId, notification) {\n        // Validate the notification\n        _validateDocument(notification);\n        // Set the user defined \"send\" rules\n        return rules.send.apply(this, [userId, notification]);\n      }\n    });\n  }\n};\n\nPush.deny = function(rules) {\n  if (rules.send) {\n    Push.notifications.deny({\n      'insert': function(userId, notification) {\n        // Validate the notification\n        _validateDocument(notification);\n        // Set the user defined \"send\" rules\n        return rules.send.apply(this, [userId, notification]);\n      }\n    });\n  }\n};\n"]}}]