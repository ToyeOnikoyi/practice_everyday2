[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar EventEmitter = Package['raix:eventemitter'].EventEmitter;\n\n/* Package-scope variables */\nvar EventState;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n// packages/raix_eventstate/packages/raix_eventstate.js                    //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n                                                                           //\n(function () {                                                             // 1\n                                                                           // 2\n///////////////////////////////////////////////////////////////////////    // 3\n//                                                                   //    // 4\n// packages/raix:eventstate/eventstate.common.js                     //    // 5\n//                                                                   //    // 6\n///////////////////////////////////////////////////////////////////////    // 7\n                                                                     //    // 8\nEventState = function(map) {                                         // 1  // 9\n  var self = this;                                                   // 2  // 10\n                                                                     // 3  // 11\n  // Make sure we return an instance of EventState                   // 4  // 12\n  if (!(self instanceof EventState)) {                               // 5  // 13\n    return new EventState(map);                                      // 6  // 14\n  }                                                                  // 7  // 15\n                                                                     // 8  // 16\n  // Extend with Event emitter                                       // 9  // 17\n EventEmitter.call(self);                                            // 10\n                                                                     // 11\n  // Map of state values                                             // 12\n  self.map = map || {};                                              // 13\n  _.each(self.map, function(val, key) {                              // 14\n    // Make sure they are all arrays of arguments _.mapObject        // 15\n    self.map[key] = _.isArray(val) ? val : [val];                    // 16\n  });                                                                // 17\n};                                                                   // 18\n                                                                     // 19\n// Extend the EventState prototype with EventEmitter                 // 20\nEventState.prototype = Object.create(EventEmitter.prototype);        // 21\n                                                                     // 22\nEventState.prototype.emitState = function(name /* arguments */) {    // 23\n  var self = this;                                                   // 24\n                                                                     // 25\n  var args = _.toArray(arguments);                                   // 26\n                                                                     // 27\n  // Set value                                                       // 28\n  self.map[name] = _.clone(_.rest(args));                            // 29\n                                                                     // 30\n  // Emit change event                                               // 31\n  EventEmitter.prototype.emit.apply(self, args);                     // 32\n                                                                     // 33\n  // Return EventState instance                                      // 34\n  return self;                                                       // 35\n};                                                                   // 36\n                                                                     // 37\nEventState.prototype.on = function(name, listener) {                 // 38\n  var self = this;                                                   // 39\n                                                                     // 40\n  // Add the listener                                                // 41\n  EventEmitter.prototype.on.call(self, name, listener);              // 42\n  // Check if state got a value                                      // 43\n  if (self.map.hasOwnProperty(name)) {                               // 44\n    // Return the current value                                      // 45\n    listener.apply(self, self.map[name]);                            // 46\n  }                                                                  // 47\n                                                                     // 48\n  // Return EventState instance                                      // 49\n  return self;                                                       // 50\n};                                                                   // 51\n                                                                     // 52\nEventState.prototype.once = function(name, listener) {               // 53\n  var self = this;                                                   // 54\n                                                                     // 55\n  // Check if state got a value                                      // 56\n  if (self.map.hasOwnProperty(name)) {                               // 57\n    // Return the value                                              // 58\n    listener.apply(self, self.map[name]);                            // 59\n  } else {                                                           // 60\n    // Add the listener                                              // 61\n    EventEmitter.prototype.once.call(self, name, listener);          // 62\n  }                                                                  // 63\n                                                                     // 64\n  // Return EventState instance                                      // 65\n  return self;                                                       // 66\n};                                                                   // 67\n                                                                     // 68\n                                                                     // 69\nEventState.prototype.clearState = function(name) {                   // 70\n  var self = this;                                                   // 71\n                                                                     // 72\n  if (name) {                                                        // 73\n    // Remove the named state                                        // 74\n    self.map = _.omit(self.map, name);                               // 75\n  } else {                                                           // 76\n    // Clear the whole map                                           // 77\n    self.map = {};                                                   // 78\n  }                                                                  // 79\n};                                                                   // 80\n                                                                     // 81\n                                                                     // 82\n// Add api helpers                                                   // 83\nEventState.prototype.addListener = EventState.prototype.on;          // 84\n                                                                     // 85\n// Add jquery like helpers                                           // 86\nEventState.prototype.one = EventState.prototype.once;                // 87\n                                                                     // 88\n///////////////////////////////////////////////////////////////////////    // 97\n                                                                           // 98\n}).call(this);                                                             // 99\n                                                                           // 100\n/////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['raix:eventstate'] = {}, {\n  EventState: EventState\n});\n\n})();\n","servePath":"/packages/raix_eventstate.js","sourceMap":{"version":3,"sources":["/packages/raix_eventstate/packages/raix_eventstate.js"],"names":[],"mappingsiF","file":"/packages/raix_eventstate.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/raix:eventstate/eventstate.common.js                     //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\nEventState = function(map) {                                         // 1\n  var self = this;                                                   // 2\n                                                                     // 3\n  // Make sure we return an instance of EventState                   // 4\n  if (!(self instanceof EventState)) {                               // 5\n    return new EventState(map);                                      // 6\n  }                                                                  // 7\n                                                                     // 8\n  // Extend with Event emitter                                       // 9\n EventEmitter.call(self);                                            // 10\n                                                                     // 11\n  // Map of state values                                             // 12\n  self.map = map || {};                                              // 13\n  _.each(self.map, function(val, key) {                              // 14\n    // Make sure they are all arrays of arguments _.mapObject        // 15\n    self.map[key] = _.isArray(val) ? val : [val];                    // 16\n  });                                                                // 17\n};                                                                   // 18\n                                                                     // 19\n// Extend the EventState prototype with EventEmitter                 // 20\nEventState.prototype = Object.create(EventEmitter.prototype);        // 21\n                                                                     // 22\nEventState.prototype.emitState = function(name /* arguments */) {    // 23\n  var self = this;                                                   // 24\n                                                                     // 25\n  var args = _.toArray(arguments);                                   // 26\n                                                                     // 27\n  // Set value                                                       // 28\n  self.map[name] = _.clone(_.rest(args));                            // 29\n                                                                     // 30\n  // Emit change event                                               // 31\n  EventEmitter.prototype.emit.apply(self, args);                     // 32\n                                                                     // 33\n  // Return EventState instance                                      // 34\n  return self;                                                       // 35\n};                                                                   // 36\n                                                                     // 37\nEventState.prototype.on = function(name, listener) {                 // 38\n  var self = this;                                                   // 39\n                                                                     // 40\n  // Add the listener                                                // 41\n  EventEmitter.prototype.on.call(self, name, listener);              // 42\n  // Check if state got a value                                      // 43\n  if (self.map.hasOwnProperty(name)) {                               // 44\n    // Return the current value                                      // 45\n    listener.apply(self, self.map[name]);                            // 46\n  }                                                                  // 47\n                                                                     // 48\n  // Return EventState instance                                      // 49\n  return self;                                                       // 50\n};                                                                   // 51\n                                                                     // 52\nEventState.prototype.once = function(name, listener) {               // 53\n  var self = this;                                                   // 54\n                                                                     // 55\n  // Check if state got a value                                      // 56\n  if (self.map.hasOwnProperty(name)) {                               // 57\n    // Return the value                                              // 58\n    listener.apply(self, self.map[name]);                            // 59\n  } else {                                                           // 60\n    // Add the listener                                              // 61\n    EventEmitter.prototype.once.call(self, name, listener);          // 62\n  }                                                                  // 63\n                                                                     // 64\n  // Return EventState instance                                      // 65\n  return self;                                                       // 66\n};                                                                   // 67\n                                                                     // 68\n                                                                     // 69\nEventState.prototype.clearState = function(name) {                   // 70\n  var self = this;                                                   // 71\n                                                                     // 72\n  if (name) {                                                        // 73\n    // Remove the named state                                        // 74\n    self.map = _.omit(self.map, name);                               // 75\n  } else {                                                           // 76\n    // Clear the whole map                                           // 77\n    self.map = {};                                                   // 78\n  }                                                                  // 79\n};                                                                   // 80\n                                                                     // 81\n                                                                     // 82\n// Add api helpers                                                   // 83\nEventState.prototype.addListener = EventState.prototype.on;          // 84\n                                                                     // 85\n// Add jquery like helpers                                           // 86\nEventState.prototype.one = EventState.prototype.once;                // 87\n                                                                     // 88\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]